{"ast":null,"code":"import { useEffect, useRef, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\n/**\n * defaultOptions which will be merged with passed in options\n */\n\nvar defaultOptions = {\n  continuous: false,\n  when: true\n};\n/**\n * useKeys hook\n *\n * @param keysList\n * @param callback\n * @param opts\n */\n\nfunction useKeys(keysList, callback, options_) {\n  var options = Object.assign({}, defaultOptions, options_);\n  var target = options.target,\n      when = options.when,\n      continuous = options.continuous;\n  var savedCallback = useRef(callback);\n  /**\n   * PressedKeyMapping will do the bookkeeping the pressed keys\n   */\n\n  var pressedKeyMappingRef = useRef({});\n  var PressedKeyMapping = pressedKeyMappingRef.current;\n  /**\n   *  First useEffect is to remember the latest callback\n   */\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  /**\n   * handleKeyDown\n   *\n   * @param   {KeyboardEvent}  event\n   * KeyDown event handler which will wrap the passed in callback\n   */\n\n  var handleKeyDown = useCallback(function (event) {\n    var pressedKeyIdentifier = null;\n    var areAllKeysFromListPressed = false; // First detect the key that was pressed;\n\n    keysList.forEach(function (identifier) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = true;\n        pressedKeyIdentifier = identifier;\n      }\n    });\n\n    if (keysList.every(function (identifier) {\n      return Boolean(PressedKeyMapping[identifier]);\n    })) {\n      areAllKeysFromListPressed = true;\n    }\n\n    if (areAllKeysFromListPressed) {\n      if (savedCallback.current) {\n        savedCallback.current(event);\n      }\n      /**\n       * If not continuous\n       * disable identifier immediately\n       */\n\n\n      if (!continuous && pressedKeyIdentifier !== null) {\n        PressedKeyMapping[pressedKeyIdentifier] = false;\n      }\n    }\n  }, [keysList, continuous]);\n  /**\n   * [handleKeyUp]\n   *\n   * @param   {KeyboardEvent}  event\n   *\n   * KeyUp event handler which will update the keys pressed state in PressedKeyMapping\n   */\n\n  var handleKeyUp = useCallback(function (event) {\n    keysList.forEach(function (identifier) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = undefined;\n      }\n    });\n  }, []);\n  /**\n   * Responsible for setting up the event listener and removing event listeners\n   */\n\n  useEffect(function () {\n    if (when && typeof window !== 'undefined') {\n      var targetNode_1 = target && target.current ? target.current : document;\n\n      if (targetNode_1) {\n        targetNode_1.addEventListener('keydown', handleKeyDown);\n        targetNode_1.addEventListener('keyup', handleKeyUp);\n      }\n\n      return function () {\n        if (targetNode_1) {\n          targetNode_1.removeEventListener('keydown', handleKeyDown);\n          targetNode_1.removeEventListener('keyup', handleKeyUp);\n        }\n      };\n    }\n  }, [when, target, keysList, handleKeyDown, handleKeyUp]);\n}\n\nexport { useKeys };","map":null,"metadata":{},"sourceType":"module"}