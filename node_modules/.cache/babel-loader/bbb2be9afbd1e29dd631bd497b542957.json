{"ast":null,"code":"import { Vector4 } from 'three';\nimport { calcSurfacePoint } from './NURBSUtils.js';\n/**\n * NURBS surface object\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n **/\n\nclass NURBSSurface {\n  constructor(degree1, degree2, knots1, knots2\n  /* arrays of reals */\n  , controlPoints\n  /* array^2 of Vector(2|3|4) */\n  ) {\n    this.degree1 = degree1;\n    this.degree2 = degree2;\n    this.knots1 = knots1;\n    this.knots2 = knots2;\n    this.controlPoints = [];\n    const len1 = knots1.length - degree1 - 1;\n    const len2 = knots2.length - degree2 - 1; // ensure Vector4 for control points\n\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = [];\n\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j];\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w);\n      }\n    }\n  }\n\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]); // linear mapping t1->u\n\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]); // linear mapping t2->u\n\n    calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n  }\n\n}\n\nexport { NURBSSurface };","map":null,"metadata":{},"sourceType":"module"}