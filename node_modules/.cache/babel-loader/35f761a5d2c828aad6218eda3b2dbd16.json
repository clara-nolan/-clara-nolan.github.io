{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n *  useDidUpdate hook\n *\n *  Fires a callback on component update\n *  Can take in a list of conditions to fire callback when one of the\n *  conditions changes\n *  Will fire callback's cleanup function on update\n *\n * @param {Function} callback The callback and its cleanup to be called on update\n * @param {Array} conditions The list of variables which trigger update when they are changed\n * @returns {}\n */\n\nfunction useUpdateEffect(callback, conditions) {\n  useWarningOnMountInDevelopment(\"useUpdateEffect is deprecated, it will be removed in rooks v7. Please use useDidUpdate instead.\");\n  var hasMountedRef = useRef(false);\n\n  if (typeof conditions !== \"undefined\" && !Array.isArray(conditions)) {\n    conditions = [conditions];\n  } else if (Array.isArray(conditions) && conditions.length === 0) {\n    console.warn(\"Using [] as the second argument makes useUpdateEffect a noop. The second argument should either be `undefined` or an array of length greater than 0.\");\n  }\n\n  useEffect(function () {\n    if (hasMountedRef.current) {\n      return callback();\n    } else {\n      hasMountedRef.current = true;\n    }\n  }, conditions);\n}\n\nexport { useUpdateEffect };","map":null,"metadata":{},"sourceType":"module"}