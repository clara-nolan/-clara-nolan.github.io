{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useRef, useEffect } from \"react\";\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the timeout\n */\n\nfunction useTimeoutWhen(callback_, timeoutDelayMs, when) {\n  if (timeoutDelayMs === void 0) {\n    timeoutDelayMs = 0;\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  });\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n  }\n\n  useEffect(function () {\n    if (when) {\n      if (typeof window !== \"undefined\") {\n        var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n        return function () {\n          window.clearTimeout(timeout_1);\n        };\n      } else {\n        console.warn(\"useTimeoutWhen: window is undefined.\");\n      }\n    }\n\n    return noop;\n  }, [when]);\n}\n\nexport { useTimeoutWhen };","map":null,"metadata":{},"sourceType":"module"}