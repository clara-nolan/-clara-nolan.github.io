{"ast":null,"code":"import Node from './Node.js';\nimport { getValueType, getValueFromType } from './NodeUtils.js';\n\nclass InputNode extends Node {\n  constructor(value) {\n    let nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(nodeType);\n    this.value = value;\n  }\n\n  getNodeType() {\n    if (this.nodeType === null) {\n      return getValueType(this.value);\n    }\n\n    return this.nodeType;\n  }\n\n  getInputType(builder) {\n    return this.getNodeType(builder);\n  }\n\n  serialize(data) {\n    var _this$value, _this$value$toArray;\n\n    super.serialize(data);\n    data.value = ((_this$value = this.value) === null || _this$value === void 0 ? void 0 : (_this$value$toArray = _this$value.toArray) === null || _this$value$toArray === void 0 ? void 0 : _this$value$toArray.call(_this$value)) || this.value;\n    data.valueType = getValueType(this.value);\n    data.nodeType = this.nodeType;\n  }\n\n  deserialize(data) {\n    var _this$value2, _this$value2$fromArra;\n\n    super.deserialize(data);\n    this.nodeType = data.nodeType;\n    this.value = getValueFromType(data.valueType);\n    this.value = ((_this$value2 = this.value) === null || _this$value2 === void 0 ? void 0 : (_this$value2$fromArra = _this$value2.fromArray) === null || _this$value2$fromArra === void 0 ? void 0 : _this$value2$fromArra.call(_this$value2, data.value)) || data.value;\n  }\n\n  generate() {\n    console.warn('Abstract function.');\n  }\n\n}\n\nInputNode.prototype.isInputNode = true;\nexport default InputNode;","map":null,"metadata":{},"sourceType":"module"}