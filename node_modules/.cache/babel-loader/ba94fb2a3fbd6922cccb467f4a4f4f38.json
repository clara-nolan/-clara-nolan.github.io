{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n * A setTimeout hook that calls a callback after a timeout duration\n *\n * @param cb The callback to be invoked after timeout\n * @param timeoutDelayMs Amount of time in ms after which to invoke\n */\n\nfunction useTimeout(callback_, timeoutDelayMs) {\n  if (timeoutDelayMs === void 0) {\n    timeoutDelayMs = 0;\n  }\n\n  useWarningOnMountInDevelopment(\"useTimeout is deprecated, it will be removed in rooks v7. Please use useTimeoutWhen instead.\");\n\n  var _a = useState(false),\n      isTimeoutActive = _a[0],\n      setIsTimeoutActive = _a[1];\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  }, [callback_]);\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n    clear();\n  }\n\n  var clear = useCallback(function () {\n    setIsTimeoutActive(false);\n  }, []);\n  var start = useCallback(function () {\n    setIsTimeoutActive(true);\n  }, []);\n  useEffect(function () {\n    if (isTimeoutActive) {\n      if (typeof window !== \"undefined\") {\n        var timeout_1 = window.setTimeout(callback, timeoutDelayMs);\n        return function () {\n          window.clearTimeout(timeout_1);\n        };\n      } else {\n        console.warn(\"useTimeout: window is undefined.\");\n      }\n    }\n\n    return noop;\n  }, [isTimeoutActive, timeoutDelayMs]);\n  return {\n    clear: clear,\n    isActive: isTimeoutActive,\n    start: start,\n    stop: clear\n  };\n}\n\nexport { useTimeout };","map":null,"metadata":{},"sourceType":"module"}