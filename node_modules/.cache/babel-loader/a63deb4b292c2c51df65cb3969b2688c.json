{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      decodeSpeed: 5,\n      encodeSpeed: 5,\n      encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n      quantization: [16, 8, 8, 8, 8],\n      exportUvs: true,\n      exportNormals: true,\n      exportColor: false\n    };\n\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n\n    let length;\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n\n    dracoEncoder.destroy(dracoObject);\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n\n}\n\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };","map":null,"metadata":{},"sourceType":"module"}