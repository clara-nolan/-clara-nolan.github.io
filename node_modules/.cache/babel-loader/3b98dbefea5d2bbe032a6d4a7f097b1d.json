{"ast":null,"code":"import { useCallback, useState } from \"react\";\n/**\n *\n * @typedef handler\n * @type {Object}\n * @property {number} value The value of the counter\n * @property {Function}  increment Increment counter value by 1\n * @property {Function} decrement Decrement counter value by 1\n * @property {Function} incrementBy Increment counter by incrAmount\n * @property {Function} decrementBy Decrement counter by decrAmount\n * @property {Function} reset Reset counter to initialValue\n */\n\n/**\n * Counter hook\n *\n * @param {number} initialValue The initial value of the counter\n * @returns {handler} A handler to interact with the counter\n */\n\nfunction useCounter(initialValue) {\n  var _a = useState(initialValue),\n      counter = _a[0],\n      setCounter = _a[1];\n  /**\n   * Increment counter by an amount\n   *\n   * @param {number} incrAmount\n   */\n\n\n  var incrementBy = useCallback(function (incrAmount) {\n    setCounter(function (currentCounter) {\n      return currentCounter + incrAmount;\n    });\n  }, []);\n  /**\n   *\n   * Decrement counter by an amount\n   *\n   * @param {*} decrAmount\n   */\n\n  var decrementBy = useCallback(function (decrAmount) {\n    incrementBy(-decrAmount);\n  }, []);\n  /**\n   * Increment counter by 1\n   */\n\n  var increment = useCallback(function () {\n    incrementBy(1);\n  }, []);\n  /**\n   * Decrement counter by 1\n   */\n\n  var decrement = useCallback(function () {\n    incrementBy(-1);\n  }, []);\n  /**\n   * Reset counter to initial value\n   */\n\n  var reset = useCallback(function () {\n    setCounter(initialValue);\n  }, []);\n  return {\n    decrement: decrement,\n    decrementBy: decrementBy,\n    increment: increment,\n    incrementBy: incrementBy,\n    reset: reset,\n    value: counter\n  };\n}\n\nexport { useCounter };","map":null,"metadata":{},"sourceType":"module"}