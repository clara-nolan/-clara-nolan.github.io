{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useMemo } from \"react\";\n\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n/**\n * useMergeRefs\n * Merges multiple refs into a single function ref.\n * Takes any number of refs.\n * Refs can be mutable refs or function refs.\n *\n * @param refs\n */\n\n\nfunction useMergeReferences() {\n  var references = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    references[_i] = arguments[_i];\n  }\n\n  return useMemo(function () {\n    if (references.every(function (ref) {\n      return ref === null;\n    })) {\n      return null;\n    }\n\n    return function (refValue) {\n      references.forEach(function (ref) {\n        setRef(ref, refValue);\n      });\n    };\n  }, __spreadArray([], references, true));\n}\n\nexport { useMergeReferences as useMergeRefs };","map":null,"metadata":{},"sourceType":"module"}