{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useEffect, useCallback, useState } from \"react\";\nvar config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\n *\n * useMutationObserverRef hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\n\nfunction useMutationObserverRef(callback, options) {\n  if (options === void 0) {\n    options = config;\n  }\n\n  var _a = useState(null),\n      node = _a[0],\n      setNode = _a[1];\n\n  useEffect(function () {\n    // Create an observer instance linked to the callback function\n    if (node) {\n      var observer_1 = new MutationObserver(callback); // Start observing the target node for configured mutations\n\n      observer_1.observe(node, options);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n\n    return noop;\n  }, [node, callback, options]);\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  return [ref];\n}\n\nexport { useMutationObserverRef };","map":null,"metadata":{},"sourceType":"module"}