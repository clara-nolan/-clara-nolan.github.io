{"ast":null,"code":"import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\n\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n\n}\n\nexport default SkinningNode;","map":null,"metadata":{},"sourceType":"module"}