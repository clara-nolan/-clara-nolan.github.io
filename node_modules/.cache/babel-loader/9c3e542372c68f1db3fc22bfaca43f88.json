{"ast":null,"code":"import { useEffect } from 'react';\nimport { useFreshTick } from './useFreshTick';\nimport { useIsomorphicEffect } from './useIsomorphicEffect';\nimport { useRefElement } from './useRefElement';\n/**\n *  useEventListenerRef hook\n *\n *  A react hook to an event listener to an element\n *  Returns a ref\n *\n * @param {string} eventName The event to track\n * @param {Function} callback The callback to be called on event\n * @param {object} conditions The options to be passed to the event listener\n * @param {boolean} isLayoutEffect Should it use layout effect. Defaults to false\n * @returns {Function} A callback ref that can be used as ref prop\n */\n\nfunction useEventListenerRef(eventName, callback, listenerOptions, isLayoutEffect) {\n  if (listenerOptions === void 0) {\n    listenerOptions = {};\n  }\n\n  if (isLayoutEffect === void 0) {\n    isLayoutEffect = false;\n  }\n\n  var _a = useRefElement(),\n      ref = _a[0],\n      element = _a[1];\n\n  var freshCallback = useFreshTick(callback);\n  var capture = listenerOptions.capture,\n      passive = listenerOptions.passive,\n      once = listenerOptions.once;\n  var useEffectToRun = isLayoutEffect ? useIsomorphicEffect : useEffect;\n  useEffectToRun(function () {\n    if (!(element && element.addEventListener)) {\n      return;\n    }\n\n    element.addEventListener(eventName, freshCallback, listenerOptions);\n    return function () {\n      element.removeEventListener(eventName, freshCallback, listenerOptions);\n    };\n  }, [element, eventName, capture, passive, once]);\n  return ref;\n}\n\nexport { useEventListenerRef };","map":null,"metadata":{},"sourceType":"module"}