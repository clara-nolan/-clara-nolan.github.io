{"ast":null,"code":"import { BufferGeometry, Vector3, Float32BufferAttribute } from 'three';\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nclass ParametricGeometry extends BufferGeometry {\n  constructor() {\n    let func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v));\n    let slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    let stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    super();\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    }; // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 0.00001;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n          p1 = new Vector3();\n    const pu = new Vector3(),\n          pv = new Vector3(); // generate vertices, normals and uvs\n\n    const sliceCount = slices + 1;\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices; // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z); // normal\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        } // cross product of tangent vectors returns surface normal\n\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(u, v);\n      }\n    } // generate indices\n\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j; // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { ParametricGeometry };","map":null,"metadata":{},"sourceType":"module"}