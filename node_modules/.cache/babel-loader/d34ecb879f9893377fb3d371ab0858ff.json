{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useFreshTick } from \"./useFreshTick\";\nimport { useIsomorphicEffect } from \"./useIsomorphicEffect\";\nimport { warning } from \"./warning\";\n/**\n *  useGlobalObjectEventListener hook\n *\n *  A react hook to an event listener to a global object\n *\n * @param {Window|Document} globalObject The global object to add event onto\n * @param {string} eventName The event to track\n * @param {Function} callback The callback to be called on event\n * @param {ListenerOptions} listenerOptions The options to be passed to the event listener\n * @param {boolean} when Should the event listener be active\n * @param {boolean} isLayoutEffect Should it use layout effect. Defaults to false\n * @returns {undefined}\n */\n\nfunction useGlobalObjectEventListener(globalObject, eventName, callback, listenerOptions, when, isLayoutEffect) {\n  if (listenerOptions === void 0) {\n    listenerOptions = {};\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  if (isLayoutEffect === void 0) {\n    isLayoutEffect = false;\n  }\n\n  var freshCallback = useFreshTick(callback);\n  var useEffectToRun = isLayoutEffect ? useIsomorphicEffect : useEffect;\n  useEffectToRun(function () {\n    warning(typeof globalObject !== \"undefined\", \"[useGlobalObjectEventListener]: Cannot attach event handlers to undefined.\");\n\n    if (typeof globalObject !== \"undefined\" && when) {\n      globalObject.addEventListener(eventName, freshCallback, listenerOptions);\n      return function () {\n        globalObject.removeEventListener(eventName, freshCallback, listenerOptions);\n      };\n    }\n\n    return function () {};\n  }, [eventName, listenerOptions]);\n}\n\nexport { useGlobalObjectEventListener };","map":null,"metadata":{},"sourceType":"module"}