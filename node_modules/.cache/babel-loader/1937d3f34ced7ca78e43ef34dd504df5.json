{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useEffect, useRef, useCallback } from \"react\";\n/**\n *  useOutsideClick hook\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\n *\n * @param ref Ref whose outside click needs to be listened to\n * @param handler Callback to fire on outside click\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\n */\n\nfunction useOutsideClick(ref, handler, when) {\n  if (when === void 0) {\n    when = true;\n  }\n\n  var savedHandler = useRef(handler);\n  var memoizedCallback = useCallback(function (e) {\n    if (ref && ref.current && !ref.current.contains(e.target)) {\n      savedHandler.current(e);\n    }\n  }, []);\n  useEffect(function () {\n    savedHandler.current = handler;\n  });\n  useEffect(function () {\n    if (when) {\n      document.addEventListener(\"click\", memoizedCallback, true);\n      document.addEventListener(\"ontouchstart\", memoizedCallback, true);\n      return function () {\n        document.removeEventListener(\"click\", memoizedCallback, true);\n        document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\n      };\n    }\n\n    return noop;\n  }, [ref, handler, when]);\n}\n\nexport { useOutsideClick };","map":null,"metadata":{},"sourceType":"module"}