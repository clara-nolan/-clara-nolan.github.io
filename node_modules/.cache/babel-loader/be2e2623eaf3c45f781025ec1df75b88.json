{"ast":null,"code":"import { useState } from \"react\";\nimport { useDebounce } from \"./useDebounce\";\nimport { useDidMount } from \"./useDidMount\";\nimport { useDidUpdate } from \"./useDidUpdate\";\nvar defaultUseDebounceValueOptions = {\n  initializeWithNull: false\n};\nexport var useDebouncedValue = function (value, timeout, options) {\n  if (options === void 0) {\n    options = {};\n  } // eslint-disable-next-line prefer-object-spread\n\n\n  var initializeWithNull = Object.assign({}, defaultUseDebounceValueOptions, options).initializeWithNull;\n\n  var _a = useState(initializeWithNull ? null : value),\n      updatedValue = _a[0],\n      setUpdatedValue = _a[1];\n\n  var debouncedSetUpdatedValue = useDebounce(setUpdatedValue, timeout);\n  useDidMount(function () {\n    if (initializeWithNull) {\n      debouncedSetUpdatedValue(value);\n    }\n  });\n  useDidUpdate(function () {\n    debouncedSetUpdatedValue(value);\n  }, [value]); // No need to add `debouncedSetUpdatedValue ` to dependencies as it is a ref.current.\n  // returning both updatedValue and setUpdatedValue (not the debounced version) to instantly update this if  needed.\n\n  return [updatedValue, setUpdatedValue];\n};","map":null,"metadata":{},"sourceType":"module"}