{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useEffect, useRef, useCallback, useState } from \"react\";\n/**\n * useOutsideClickRef hook\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\n *\n * @param handler Callback to fire on outside click\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\n * @returns An array with first item being ref\n */\n\nfunction useOutsideClickRef(handler, when) {\n  if (when === void 0) {\n    when = true;\n  }\n\n  var savedHandler = useRef(handler);\n\n  var _a = useState(null),\n      node = _a[0],\n      setNode = _a[1];\n\n  var memoizedCallback = useCallback(function (e) {\n    if (node && !node.contains(e.target)) {\n      savedHandler.current(e);\n    }\n  }, [node]);\n  useEffect(function () {\n    savedHandler.current = handler;\n  });\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  useEffect(function () {\n    if (when) {\n      document.addEventListener(\"click\", memoizedCallback, true);\n      document.addEventListener(\"ontouchstart\", memoizedCallback, true);\n      return function () {\n        document.removeEventListener(\"click\", memoizedCallback, true);\n        document.removeEventListener(\"ontouchstart\", memoizedCallback, true);\n      };\n    }\n\n    return noop;\n  }, [when, memoizedCallback]);\n  return [ref];\n}\n\nexport { useOutsideClickRef };","map":null,"metadata":{},"sourceType":"module"}