{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\nimport { doesIdentifierMatchKeyboardEvent } from \"../utils/doesIdentifierMatchKeyboardEvent\";\nimport { noop } from \"../utils/noop\";\nvar defaultOptions = {\n  eventTypes: [\"keydown\"],\n  when: true\n};\n/**\n * useKeyRef hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keys List of keys to listen for. Eg: [\"a\", \"b\"]\n * @param {Function} callback Callback to fire on keyboard events\n * @param {Options} options Options\n * @returns {CallbackRef} CallbackRef\n * @see {@link https://react-hooks.org/docs/useKeyRef}\n */\n\nfunction useKeyRef(keys, callback, options) {\n  var _a = useState(null),\n      targetNode = _a[0],\n      setTargetNode = _a[1];\n\n  var ref = useCallback(function (node) {\n    setTargetNode(node);\n  }, []);\n  var keyList = useMemo(function () {\n    if (Array.isArray(keys)) {\n      return keys;\n    } else {\n      return [keys];\n    }\n  }, [keys]);\n  var internalOptions = useMemo(function () {\n    return __assign(__assign({}, defaultOptions), options);\n  }, [options]);\n  var when = internalOptions.when,\n      eventTypes = internalOptions.eventTypes;\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(function (event) {\n    if (keyList.some(function (identifier) {\n      return doesIdentifierMatchKeyboardEvent(event, identifier);\n    })) {\n      callbackRef.current(event);\n    }\n  }, [keyList]);\n  useEffect(function () {\n    if (when && targetNode) {\n      for (var _i = 0, eventTypes_1 = eventTypes; _i < eventTypes_1.length; _i++) {\n        var eventType = eventTypes_1[_i]; // eslint-disable-next-line prefer-arrow-callback\n\n        targetNode.addEventListener(eventType, handle);\n      }\n\n      return function () {\n        for (var _i = 0, eventTypes_2 = eventTypes; _i < eventTypes_2.length; _i++) {\n          var eventType = eventTypes_2[_i];\n          targetNode.removeEventListener(eventType, handle);\n        }\n      };\n    }\n\n    return noop;\n  }, [targetNode, when, eventTypes, keyList, handle]);\n  return ref;\n}\n\nexport { useKeyRef };","map":null,"metadata":{},"sourceType":"module"}