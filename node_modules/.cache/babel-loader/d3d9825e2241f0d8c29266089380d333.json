{"ast":null,"code":"import ContextNode from '../core/ContextNode.js';\nimport VarNode from '../core/VarNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport { PhysicalLightingModel } from '../functions/BSDFs.js';\nimport { Vector3 } from 'three';\n\nclass LightContextNode extends ContextNode {\n  constructor(node) {\n    super(node);\n  }\n\n  getNodeType() {\n    return 'vec3';\n  }\n\n  generate(builder) {\n    const material = builder.material;\n    let lightingModel = null;\n\n    if (material.isMeshStandardMaterial === true) {\n      lightingModel = PhysicalLightingModel;\n    }\n\n    const directDiffuse = new VarNode(new UniformNode(new Vector3()), 'DirectDiffuse', 'vec3');\n    const directSpecular = new VarNode(new UniformNode(new Vector3()), 'DirectSpecular', 'vec3');\n    this.context.directDiffuse = directDiffuse;\n    this.context.directSpecular = directSpecular;\n\n    if (lightingModel !== null) {\n      this.context.lightingModel = lightingModel;\n    } // add code\n\n\n    const type = this.getNodeType(builder);\n    super.generate(builder, type);\n    const totalLight = new OperatorNode('+', directDiffuse, directSpecular);\n    return totalLight.build(builder, type);\n  }\n\n}\n\nexport default LightContextNode;","map":null,"metadata":{},"sourceType":"module"}