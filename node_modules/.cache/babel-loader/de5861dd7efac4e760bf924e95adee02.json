{"ast":null,"code":"import { Curve, Vector3 } from 'three';\n/**\n * A bunch of parametric curves\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://mathdl.maa.org/images/upload_library/23/stemkoski/knots/page6.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://mathdl.maa.org/images/upload_library/23/stemkoski/knots/page4.html\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nclass GrannyKnot extends Curve {\n  constructor() {\n    super();\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t = 2 * Math.PI * t;\n    const x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t);\n    const y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t);\n    const z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(20);\n  }\n\n} // HeartCurve\n\n\nclass HeartCurve extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 5 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t *= 2 * Math.PI;\n    const x = 16 * Math.pow(Math.sin(t), 3);\n    const y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);\n    const z = 0;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // Viviani's Curve\n\n\nclass VivianiCurve extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 70 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t = t * 4 * Math.PI; // normalized to 0..1\n\n    const a = this.scale / 2;\n    const x = a * (1 + Math.cos(t));\n    const y = a * Math.sin(t);\n    const z = 2 * a * Math.sin(t / 2);\n    return point.set(x, y, z);\n  }\n\n} // KnotCurve\n\n\nclass KnotCurve extends Curve {\n  constructor() {\n    super();\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t *= 2 * Math.PI;\n    const R = 10;\n    const s = 50;\n    const x = s * Math.sin(t);\n    const y = Math.cos(t) * (R + s * Math.cos(t));\n    const z = Math.sin(t) * (R + s * Math.cos(t));\n    return point.set(x, y, z);\n  }\n\n} // HelixCurve\n\n\nclass HelixCurve extends Curve {\n  constructor() {\n    super();\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const a = 30; // radius\n\n    const b = 150; // height\n\n    const t2 = 2 * Math.PI * t * b / 30;\n    const x = Math.cos(t2) * a;\n    const y = Math.sin(t2) * a;\n    const z = b * t;\n    return point.set(x, y, z);\n  }\n\n} // TrefoilKnot\n\n\nclass TrefoilKnot extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(3 * t)) * Math.cos(2 * t);\n    const y = (2 + Math.cos(3 * t)) * Math.sin(2 * t);\n    const z = Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // TorusKnot\n\n\nclass TorusKnot extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const p = 3;\n    const q = 4;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // CinquefoilKnot\n\n\nclass CinquefoilKnot extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const p = 2;\n    const q = 5;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // TrefoilPolynomialKnot\n\n\nclass TrefoilPolynomialKnot extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t = t * 4 - 2;\n    const x = Math.pow(t, 3) - 3 * t;\n    const y = Math.pow(t, 4) - 4 * t * t;\n    const z = 1 / 5 * Math.pow(t, 5) - 2 * t;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n}\n\nconst scaleTo = (x, y, t) => {\n  const r = y - x;\n  return t * r + x;\n}; // FigureEightPolynomialKnot\n\n\nclass FigureEightPolynomialKnot extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 1 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t = scaleTo(-4, 4, t);\n    const x = 2 / 5 * t * (t * t - 7) * (t * t - 10);\n    const y = Math.pow(t, 4) - 13 * t * t;\n    const z = 1 / 10 * t * (t * t - 4) * (t * t - 9) * (t * t - 12);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // DecoratedTorusKnot4a\n\n\nclass DecoratedTorusKnot4a extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    t *= Math.PI * 2;\n    const x = Math.cos(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const y = Math.sin(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const z = 0.35 * Math.sin(5 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // DecoratedTorusKnot4b\n\n\nclass DecoratedTorusKnot4b extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const y = Math.sin(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const z = 0.2 * Math.sin(9 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // DecoratedTorusKnot5a\n\n\nclass DecoratedTorusKnot5a extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const y = Math.sin(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const z = 0.2 * Math.sin(20 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n} // DecoratedTorusKnot5c\n\n\nclass DecoratedTorusKnot5c extends Curve {\n  constructor(scale) {\n    super();\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const y = Math.sin(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const z = 0.35 * Math.sin(15 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n\n}\n\nexport { CinquefoilKnot, DecoratedTorusKnot4a, DecoratedTorusKnot4b, DecoratedTorusKnot5a, DecoratedTorusKnot5c, FigureEightPolynomialKnot, GrannyKnot, HeartCurve, HelixCurve, KnotCurve, TorusKnot, TrefoilKnot, TrefoilPolynomialKnot, VivianiCurve, scaleTo };","map":null,"metadata":{},"sourceType":"module"}