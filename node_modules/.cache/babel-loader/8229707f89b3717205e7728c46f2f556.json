{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\n\nclass MaterialNode extends Node {\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MaterialNode.COLOR;\n    super();\n    this.scope = scope;\n  }\n\n  getNodeType(builder) {\n    const scope = this.scope;\n    const material = builder.context.material;\n\n    if (scope === MaterialNode.COLOR) {\n      return material.map !== null ? 'vec4' : 'vec3';\n    } else if (scope === MaterialNode.OPACITY) {\n      return 'float';\n    } else if (scope === MaterialNode.SPECULAR) {\n      return 'vec3';\n    } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS) {\n      return 'float';\n    }\n  }\n\n  generate(builder, output) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n\n    if (scope === MaterialNode.ALPHA_TEST) {\n      node = new MaterialReferenceNode('alphaTest', 'float');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = new MaterialReferenceNode('color', 'color');\n\n      if (material.map !== null && material.map !== undefined && material.map.isTexture === true) {\n        node = new OperatorNode('*', colorNode, new MaterialReferenceNode('map', 'texture'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = new MaterialReferenceNode('opacity', 'float');\n\n      if (material.alphaMap !== null && material.alphaMap !== undefined && material.alphaMap.isTexture === true) {\n        node = new OperatorNode('*', opacityNode, new MaterialReferenceNode('alphaMap', 'texture'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR) {\n      const specularColorNode = new MaterialReferenceNode('specularColor', 'color');\n\n      if (material.specularColorMap !== null && material.specularColorMap !== undefined && material.specularColorMap.isTexture === true) {\n        node = new OperatorNode('*', specularColorNode, new MaterialReferenceNode('specularColorMap', 'texture'));\n      } else {\n        node = specularColorNode;\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = new MaterialReferenceNode(scope, outputType);\n    }\n\n    return node.build(builder, output);\n  }\n\n}\n\n_defineProperty(MaterialNode, \"ALPHA_TEST\", 'alphaTest');\n\n_defineProperty(MaterialNode, \"COLOR\", 'color');\n\n_defineProperty(MaterialNode, \"OPACITY\", 'opacity');\n\n_defineProperty(MaterialNode, \"SPECULAR\", 'specular');\n\n_defineProperty(MaterialNode, \"ROUGHNESS\", 'roughness');\n\n_defineProperty(MaterialNode, \"METALNESS\", 'metalness');\n\nexport default MaterialNode;","map":null,"metadata":{},"sourceType":"module"}