{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n * useEffectOnceWhen hook\n *\n * It fires a callback once when a condition is true or become true.\n * Fires the callback at most one time.\n *\n * @param callback The callback to fire\n * @param when The condition which needs to be true\n */\n\nfunction useEffectOnceWhen(callback, when) {\n  if (when === void 0) {\n    when = true;\n  }\n\n  var hasRunOnceRef = useRef(false);\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  useEffect(function () {\n    if (when && !hasRunOnceRef.current) {\n      callbackRef.current();\n      hasRunOnceRef.current = true;\n    }\n  }, [when]);\n}\n\nexport { useEffectOnceWhen };","map":null,"metadata":{},"sourceType":"module"}