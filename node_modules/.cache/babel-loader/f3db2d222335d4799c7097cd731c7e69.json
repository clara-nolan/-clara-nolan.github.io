{"ast":null,"code":"/* eslint-disable no-negated-condition */\nimport { useCallback, useState } from \"react\";\n\nfunction warnIfBothValueAndIndexAreProvided(functionName, object) {\n  if (Object.values(object).every(function (value) {\n    return typeof value !== \"undefined\";\n  })) {\n    console.warn(\"\".concat(functionName, \". Expected either \").concat(Object.keys(object).join(\" or \"), \" to be provided. However all were provided\"));\n  } else if (Object.values(object).every(function (value) {\n    return typeof value === \"undefined\";\n  })) {\n    console.warn(\"\".concat(functionName, \". \").concat(Object.keys(object).join(\" , \"), \" are all undefined.\"));\n  }\n}\n/**\n * useSelectableList\n * Easily select a single value from a list of values. very useful for radio buttons, select inputs  etc.\n *\n * @param list - The list of values to select from\n * @param initialIndex  - The index of the initial selection\n * @param allowUnselected\n * @see {@link https://react-hooks.org/docs/useSelectableList}\n */\n\n\nfunction useSelectableList(list, initialIndex, allowUnselected) {\n  if (list === void 0) {\n    list = [];\n  }\n\n  if (initialIndex === void 0) {\n    initialIndex = 0;\n  }\n\n  if (allowUnselected === void 0) {\n    allowUnselected = false;\n  }\n\n  var _a = useState(initialIndex),\n      currentIndex = _a[0],\n      setCurrentIndex = _a[1];\n\n  var currentValue = list[currentIndex];\n  var selection = [currentIndex, currentValue];\n  var updateSelection = useCallback(function (_a) {\n    var index = _a.index,\n        value = _a.value;\n    return function () {\n      warnIfBothValueAndIndexAreProvided(\"updateSelection\", {\n        index: index,\n        value: value\n      });\n\n      if (typeof index !== \"undefined\") {\n        setCurrentIndex(index);\n      } else if (typeof value !== \"undefined\") {\n        var valueIndex = list.indexOf(value);\n\n        if (valueIndex > -1) {\n          setCurrentIndex(valueIndex);\n        } else {\n          console.warn(\"updateSelection failed. Does the value \".concat(value, \" exist in the list?\"));\n        }\n      }\n    };\n  }, [list]);\n  var toggleSelection = useCallback(function (_a) {\n    var index = _a.index,\n        value = _a.value;\n    return function () {\n      warnIfBothValueAndIndexAreProvided(\"toggleSelection\", {\n        index: index,\n        value: value\n      });\n\n      if (typeof index !== \"undefined\") {\n        if (currentIndex === index) {\n          if (allowUnselected) {\n            setCurrentIndex(-1);\n          } else {\n            console.warn(\"allowUnselected is false. Cannot unselect item\");\n          }\n        } else {\n          setCurrentIndex(index);\n        }\n      } else if (typeof value !== \"undefined\") {\n        var valueIndex = list.indexOf(value);\n\n        if (valueIndex > -1) {\n          if (currentIndex === valueIndex) {\n            if (allowUnselected) {\n              setCurrentIndex(-1);\n            } else {\n              console.warn(\"allowUnselected is false. Cannot unselect item\");\n            }\n          } else {\n            setCurrentIndex(valueIndex);\n          }\n        } else {\n          console.log(\"as\");\n          console.warn(\"toggleSelection failed. Does the value \".concat(value, \" exist in the list?\"));\n        }\n      }\n    };\n  }, [allowUnselected, currentIndex, list]);\n  var matchSelection = useCallback(function (_a) {\n    var index = _a.index,\n        value = _a.value;\n    warnIfBothValueAndIndexAreProvided(\"matchSelection\", {\n      index: index,\n      value: value\n    });\n\n    if (typeof index !== \"undefined\") {\n      return index === currentIndex;\n    } else {\n      return value === currentValue;\n    }\n  }, [currentIndex, currentValue]);\n  var controls = {\n    matchSelection: matchSelection,\n    toggleSelection: toggleSelection,\n    updateSelection: updateSelection\n  };\n  return [selection, controls];\n}\n\nexport { useSelectableList };","map":null,"metadata":{},"sourceType":"module"}