{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useDidMount } from \"./useDidMount\";\nimport { useUpdateEffect } from \"./useUpdateEffect\";\nimport { useWillUnmount } from \"./useWillUnmount\";\n/**\n * useLifecycleLogger hook\n * logs parameters as component transitions through lifecycles\n *\n * @param componentName Name of the component\n * @param rest\n */\n\nvar useLifecycleLogger = function (componentName) {\n  if (componentName === void 0) {\n    componentName = \"Component\";\n  }\n\n  var otherArgs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n\n  useDidMount(function () {\n    console.log.apply(console, __spreadArray([\"\".concat(componentName, \" mounted\")], otherArgs, false));\n    return function () {\n      return console.log(\"\".concat(componentName, \" unmounted\"));\n    };\n  });\n  useUpdateEffect(function () {\n    console.log.apply(console, __spreadArray([\"\".concat(componentName, \" updated\")], otherArgs, false));\n  });\n  useWillUnmount(function () {\n    console.log(\"\".concat(componentName, \" unmounted\"));\n  });\n};\n\nexport { useLifecycleLogger };","map":null,"metadata":{},"sourceType":"module"}