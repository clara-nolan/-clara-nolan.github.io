{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useState } from \"react\";\n/**\n * useMapState hook\n * A hook to manage state in the form of a map or object.\n *\n * @param initialValue Initial value of the map\n */\n\nfunction useMapState(initialValue) {\n  var _a = useState(initialValue),\n      map = _a[0],\n      setMap = _a[1];\n\n  var set = useCallback(function (key, value) {\n    setMap(function (currentMap) {\n      var _a;\n\n      return __assign(__assign({}, currentMap), (_a = {}, _a[key] = value, _a));\n    });\n  }, []);\n  var has = useCallback(function (key) {\n    return typeof map[key] !== \"undefined\";\n  }, [map]);\n  var setMultiple = useCallback(function (nextMap) {\n    setMap(function (currentMap) {\n      return __assign(__assign({}, currentMap), nextMap);\n    });\n  }, []);\n  var removeMultiple = useCallback(function () {\n    var keys = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      keys[_i] = arguments[_i];\n    }\n\n    setMap(function (currentMap) {\n      var nextMap = __assign({}, currentMap);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        delete nextMap[key];\n      }\n\n      return nextMap;\n    });\n  }, [setMap]);\n  var remove = useCallback(function (key) {\n    setMap(function (currentMap) {\n      var nextMap = __assign({}, currentMap);\n\n      delete nextMap[key];\n      return nextMap;\n    });\n  }, [setMap]);\n  var removeAll = useCallback(function () {\n    setMap(function (currentMap) {\n      var nextMap = __assign({}, currentMap);\n\n      for (var key in nextMap) {\n        delete nextMap[key];\n      }\n\n      return nextMap;\n    });\n  }, [setMap]);\n  return [map, {\n    has: has,\n    remove: remove,\n    removeAll: removeAll,\n    removeMultiple: removeMultiple,\n    set: set,\n    setMultiple: setMultiple\n  }];\n}\n\nexport { useMapState };","map":null,"metadata":{},"sourceType":"module"}