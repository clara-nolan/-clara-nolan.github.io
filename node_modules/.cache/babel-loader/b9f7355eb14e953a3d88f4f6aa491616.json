{"ast":null,"code":"import Node from '../core/Node.js';\nimport Object3DNode from '../accessors/Object3DNode.js';\nimport PositionNode from '../accessors/PositionNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { getDistanceAttenuation } from '../functions/BSDFs.js';\nimport { Color } from 'three';\n\nclass LightNode extends Node {\n  constructor() {\n    let light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super('vec3');\n    this.updateType = NodeUpdateType.Object;\n    this.light = light;\n    this._colorNode = new UniformNode(new Color());\n    this._lightCutoffDistanceNode = new UniformNode(0);\n    this._lightDecayExponentNode = new UniformNode(0);\n  }\n\n  getHash() {\n    return this.light.uuid;\n  }\n\n  update() {\n    this._colorNode.value.copy(this.light.color).multiplyScalar(this.light.intensity);\n\n    this._lightCutoffDistanceNode.value = this.light.distance;\n    this._lightDecayExponentNode.value = this.light.decay;\n  }\n\n  generate(builder) {\n    const lightPositionView = new Object3DNode(Object3DNode.VIEW_POSITION);\n    const positionView = new PositionNode(PositionNode.VIEW);\n    const lVector = new OperatorNode('-', lightPositionView, positionView);\n    const lightDirection = new MathNode(MathNode.NORMALIZE, lVector);\n    const lightDistance = new MathNode(MathNode.LENGTH, lVector);\n    const lightAttenuation = getDistanceAttenuation({\n      lightDistance,\n      cutoffDistance: this._lightCutoffDistanceNode,\n      decayExponent: this._lightDecayExponentNode\n    });\n    const lightColor = new OperatorNode('*', this._colorNode, lightAttenuation);\n    lightPositionView.object3d = this.light;\n    const lightingModelFunction = builder.context.lightingModel;\n\n    if (lightingModelFunction !== undefined) {\n      const directDiffuse = builder.context.directDiffuse;\n      const directSpecular = builder.context.directSpecular;\n      lightingModelFunction({\n        lightDirection,\n        lightColor,\n        directDiffuse,\n        directSpecular\n      }, builder);\n    }\n  }\n\n}\n\nexport default LightNode;","map":null,"metadata":{},"sourceType":"module"}