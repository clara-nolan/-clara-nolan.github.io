{"ast":null,"code":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { noop } from \"../utils/noop\";\n/**\n * useThrottle\n * Throttles a function with a timeout and ensures\n * that the callback function runs at most once in that duration\n *\n * @param callback The callback to throttle\n * @param timeout Throttle timeout\n * @see {@link https://react-hooks.org/docs/useThrottle}\n */\n\nfunction useThrottle(callback, timeout) {\n  if (timeout === void 0) {\n    timeout = 300;\n  }\n\n  var _a = useState(true),\n      ready = _a[0],\n      setReady = _a[1];\n\n  var timerRef = useRef(undefined);\n  var throttledFunction = useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!ready) {\n      return;\n    }\n\n    setReady(false);\n    callback.apply(void 0, args);\n  }, [ready, callback]);\n  useEffect(function () {\n    if (!ready) {\n      timerRef.current = window.setTimeout(function () {\n        setReady(true);\n      }, timeout);\n      return function () {\n        return window.clearTimeout(timerRef.current);\n      };\n    }\n\n    return noop;\n  }, [ready, timeout]);\n  return [throttledFunction, ready];\n}\n\nexport { useThrottle };","map":null,"metadata":{},"sourceType":"module"}