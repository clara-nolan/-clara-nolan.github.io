{"ast":null,"code":"import { useMemo, useState, useEffect, useCallback, useRef } from \"react\";\n\nfunction getValueFromSessionStorage(key) {\n  var _a;\n\n  if (typeof sessionStorage === \"undefined\") {\n    return null;\n  }\n\n  var storedValue = (_a = sessionStorage.getItem(key)) !== null && _a !== void 0 ? _a : \"null\";\n\n  try {\n    return JSON.parse(storedValue);\n  } catch (error) {\n    console.error(error);\n  }\n\n  return storedValue;\n}\n\nfunction saveValueToSessionStorage(key, value) {\n  if (typeof sessionStorage === \"undefined\") {\n    return null;\n  }\n\n  return sessionStorage.setItem(key, JSON.stringify(value));\n}\n/**\n * @param key Key of the sessionStorage object\n * @param initialState Default initial value\n */\n\n\nfunction initialize(key, initialState) {\n  var valueLoadedFromSessionStorage = getValueFromSessionStorage(key);\n\n  if (valueLoadedFromSessionStorage === null) {\n    return initialState;\n  } else {\n    return valueLoadedFromSessionStorage;\n  }\n}\n/**\n * useSessionstorageState hook\n * Tracks a value within sessionStorage and updates it\n *\n * @param {string} key - Key of the sessionStorage object\n * @param {any} initialState - Default initial value\n */\n\n\nfunction useSessionstorageState(key, initialState) {\n  var _a = useState(function () {\n    return initialize(key, initialState);\n  }),\n      value = _a[0],\n      setValue = _a[1];\n\n  var isUpdateFromCrossDocumentListener = useRef(false);\n  var isUpdateFromWithinDocumentListener = useRef(false);\n  var customEventTypeName = useMemo(function () {\n    return \"rooks-\".concat(key, \"-sessionstorage-update\");\n  }, [key]);\n  useEffect(function () {\n    /**\n     * We need to ensure there is no loop of\n     * storage events fired. Hence we are using a ref\n     * to keep track of whether setValue is from another\n     * storage event\n     */\n    if (!isUpdateFromCrossDocumentListener.current) {\n      saveValueToSessionStorage(key, value);\n    }\n  }, [key, value]);\n  var listenToCrossDocumentStorageEvents = useCallback(function (event) {\n    var _a;\n\n    if (event.storageArea === sessionStorage && event.key === key) {\n      try {\n        isUpdateFromCrossDocumentListener.current = true;\n        var newValue = JSON.parse((_a = event.newValue) !== null && _a !== void 0 ? _a : \"null\");\n\n        if (value !== newValue) {\n          setValue(newValue);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [key, value]); // check for changes across windows\n\n  useEffect(function () {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"storage\", listenToCrossDocumentStorageEvents);\n      return function () {\n        window.removeEventListener(\"storage\", listenToCrossDocumentStorageEvents);\n      };\n    } else {\n      console.warn(\"[useSessionstorageState] window is undefined.\");\n      return function () {};\n    }\n  }, [listenToCrossDocumentStorageEvents]);\n  var listenToCustomEventWithinDocument = useCallback(function (event) {\n    try {\n      isUpdateFromWithinDocumentListener.current = true;\n      var newValue = event.detail.newValue;\n\n      if (value !== newValue) {\n        setValue(newValue);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [value]); // check for changes within document\n\n  useEffect(function () {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof document !== \"undefined\") {\n      document.addEventListener(customEventTypeName, listenToCustomEventWithinDocument);\n      return function () {\n        document.removeEventListener(customEventTypeName, listenToCustomEventWithinDocument);\n      };\n    } else {\n      console.warn(\"[useSessionstorageState] document is undefined.\");\n      return function () {};\n    }\n  }, [customEventTypeName, listenToCustomEventWithinDocument]);\n  var broadcastValueWithinDocument = useCallback(function (newValue) {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof document !== \"undefined\") {\n      var event_1 = new CustomEvent(customEventTypeName, {\n        detail: {\n          newValue: newValue\n        }\n      });\n      document.dispatchEvent(event_1);\n    } else {\n      console.warn(\"[useSessionstorageState] document is undefined.\");\n    }\n  }, [customEventTypeName]);\n  var set = useCallback(function (newValue) {\n    isUpdateFromCrossDocumentListener.current = false;\n    isUpdateFromWithinDocumentListener.current = false;\n    setValue(newValue);\n    broadcastValueWithinDocument(newValue);\n  }, [broadcastValueWithinDocument]);\n  var remove = useCallback(function () {\n    sessionStorage.removeItem(key);\n  }, [key]);\n  return [value, set, remove];\n}\n\nexport { useSessionstorageState };","map":null,"metadata":{},"sourceType":"module"}