{"ast":null,"code":"import Node from '../core/Node.js';\nimport ConstNode from '../core/ConstNode.js';\nimport UVNode from '../accessors/UVNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport SplitNode from './SplitNode.js';\nimport JoinNode from './JoinNode.js';\n\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    let frameNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConstNode(0);\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n\n  generate(builder) {\n    const count = this.countNode;\n    const uv = this.uvNode;\n    const frame = this.frameNode;\n    const one = new ConstNode(1);\n    const width = new SplitNode(count, 'x');\n    const height = new SplitNode(count, 'y');\n    const total = new OperatorNode('*', width, height);\n    const roundFrame = new MathNode(MathNode.FLOOR, new MathNode(MathNode.MOD, frame, total));\n    const frameNum = new OperatorNode('+', roundFrame, one);\n    const cell = new MathNode(MathNode.MOD, roundFrame, width);\n    const row = new MathNode(MathNode.CEIL, new OperatorNode('/', frameNum, width));\n    const rowInv = new OperatorNode('-', height, row);\n    const scale = new OperatorNode('/', one, count);\n    const uvFrameOffset = new JoinNode([new OperatorNode('*', cell, new SplitNode(scale, 'x')), new OperatorNode('*', rowInv, new SplitNode(scale, 'y'))]);\n    const uvScale = new OperatorNode('*', uv, scale);\n    const uvFrame = new OperatorNode('+', uvScale, uvFrameOffset);\n    return uvFrame.build(builder, this.getNodeType(builder));\n  }\n\n}\n\nexport default SpriteSheetUVNode;","map":null,"metadata":{},"sourceType":"module"}