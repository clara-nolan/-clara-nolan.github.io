{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { doesIdentifierMatchKeyboardEvent } from \"../utils/doesIdentifierMatchKeyboardEvent\";\nimport { noop } from \"../utils/noop\";\nvar defaultOptions = {\n  eventTypes: [\"keydown\"],\n  when: true\n};\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {TrackedKeyEvents} keys List of keys to listen for. Eg: [\"a\", \"b\"]\n * @param {Callback} callback  Callback to fire on keyboard events\n * @param {Options} options Options\n * @see {@link https://react-hooks.org/docs/useKey}\n */\n\nfunction useKey(keys, callback, options) {\n  var keyList = useMemo(function () {\n    if (Array.isArray(keys)) {\n      return keys;\n    } else {\n      return [keys];\n    }\n  }, [keys]);\n  var internalOptions = useMemo(function () {\n    return __assign(__assign({}, defaultOptions), options);\n  }, [options]);\n  var when = internalOptions.when,\n      eventTypes = internalOptions.eventTypes;\n  var callbackRef = useRef(callback);\n  var target = internalOptions.target;\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(function (event) {\n    if (keyList.some(function (identifier) {\n      return doesIdentifierMatchKeyboardEvent(event, identifier);\n    })) {\n      callbackRef.current(event);\n    }\n  }, [keyList]);\n  useEffect(function () {\n    if (when && typeof window !== \"undefined\") {\n      // If target is defined by the user\n      if (target) {\n        var targetNode_1 = target.current;\n\n        if (targetNode_1) {\n          for (var _i = 0, eventTypes_1 = eventTypes; _i < eventTypes_1.length; _i++) {\n            var eventType = eventTypes_1[_i];\n            targetNode_1.addEventListener(eventType, handle);\n          }\n\n          return function () {\n            for (var _i = 0, eventTypes_3 = eventTypes; _i < eventTypes_3.length; _i++) {\n              var eventType = eventTypes_3[_i];\n              targetNode_1.removeEventListener(eventType, handle);\n            }\n          };\n        }\n      } else {\n        for (var _a = 0, eventTypes_2 = eventTypes; _a < eventTypes_2.length; _a++) {\n          var eventType = eventTypes_2[_a];\n          window.addEventListener(eventType, handle);\n        }\n\n        return function () {\n          for (var _i = 0, eventTypes_4 = eventTypes; _i < eventTypes_4.length; _i++) {\n            var eventType = eventTypes_4[_i];\n            window.removeEventListener(eventType, handle);\n          }\n        };\n      }\n    }\n\n    return noop;\n  }, [when, eventTypes, keyList, target, callback, handle]);\n}\n\nexport { useKey };","map":null,"metadata":{},"sourceType":"module"}