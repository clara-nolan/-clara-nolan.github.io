{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber'; // ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\n\nfunction useFBO(width, height, settings) {\n  const {\n    gl,\n    size,\n    viewport\n  } = useThree();\n\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };","map":null,"metadata":{},"sourceType":"module"}