{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport { useForkRef } from './useForkRef';\nimport { useMutationObserverRef } from './useMutationObserverRef';\n/**\n * @param element HTML element whose boundingclientrect is needed\n * @returns ClientRect\n */\n\nfunction getBoundingClientRect(element) {\n  return element.getBoundingClientRect();\n}\n/**\n * useBoundingclientrectRef hook\n *\n * @returns [CallbackRef | null, ClientRect | DOMRect | null, () => void]\n */\n\n\nfunction useBoundingclientrectRef() {\n  var _a = useState(null),\n      value = _a[0],\n      setValue = _a[1];\n\n  var _b = useState(null),\n      node = _b[0],\n      setNode = _b[1];\n\n  var update = useCallback(function () {\n    setValue(node ? getBoundingClientRect(node) : null);\n  }, [node]);\n  useEffect(function () {\n    update();\n  }, [node]);\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  var mutationObserverRef = useMutationObserverRef(update)[0];\n  var forkedRef = useForkRef(ref, mutationObserverRef);\n  return [forkedRef, value, update];\n}\n\nexport { useBoundingclientrectRef };","map":null,"metadata":{},"sourceType":"module"}