{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}; // @ts-nocheck\n\n\nimport { useState, useCallback, useRef } from \"react\";\nimport { useDocumentEventListener } from \"./useDocumentEventListener\";\nimport { warning } from \"./warning\";\n\nvar getFullscreenControls = function () {\n  var functionMap = [[\"requestFullscreen\", \"exitFullscreen\", \"fullscreenElement\", \"fullscreenEnabled\", \"fullscreenchange\", \"fullscreenerror\"], // New WebKit\n  [\"webkitRequestFullscreen\", \"webkitExitFullscreen\", \"webkitFullscreenElement\", \"webkitFullscreenEnabled\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], // Old WebKit\n  [\"webkitRequestFullScreen\", \"webkitCancelFullScreen\", \"webkitCurrentFullScreenElement\", \"webkitCancelFullScreen\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], [\"mozRequestFullScreen\", \"mozCancelFullScreen\", \"mozFullScreenElement\", \"mozFullScreenEnabled\", \"mozfullscreenchange\", \"mozfullscreenerror\"], [\"msRequestFullscreen\", \"msExitFullscreen\", \"msFullscreenElement\", \"msFullscreenEnabled\", \"MSFullscreenChange\", \"MSFullscreenError\"]];\n  var returnValue = {};\n\n  for (var _i = 0, functionMap_1 = functionMap; _i < functionMap_1.length; _i++) {\n    var functionSet = functionMap_1[_i];\n\n    if (functionSet && functionSet[1] in document) {\n      for (var _a = 0, _b = functionSet.entries(); _a < _b.length; _a++) {\n        var _c = _b[_a],\n            index = _c[0],\n            _function = _c[1];\n        returnValue[functionMap[0][index]] = functionSet[index];\n      }\n    }\n  }\n\n  return returnValue;\n};\n\nvar noop = function () {};\n\nvar defaultValue = {\n  // isFullscreen\n  element: undefined,\n  // request\n  exit: noop,\n  isEnabled: false,\n  // exit\n  isFullscreen: false,\n  // toggle\n  onChange: noop,\n  // onchange\n  onError: noop,\n  // onerror\n  request: noop,\n  toggle: noop\n};\n\nfunction warnDeprecatedOnChangeAndOnErrorUsage() {\n  warning(false, \"Using onChange and onError from the return value is deprecated and \\n    will be removed in the next major version. \\n    Please use it with arguments instead. \\n    For eg: useFullscreen({onChange: function() {}, onError: function(){}})\\n  \");\n}\n/**\n * useFullscreen\n * A hook that helps make the document fullscreen\n */\n\n\nfunction useFullscreen(options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof window === \"undefined\") {\n    console.warn(\"useFullscreen: window is undefined.\");\n    return defaultValue;\n  }\n\n  var onChangeArgument = options.onChange,\n      onErrorArgument = options.onError,\n      _a = options.requestFullscreenOptions,\n      requestFullscreenOptions = _a === void 0 ? {} : _a;\n  var fullscreenControls = getFullscreenControls();\n\n  var _b = useState(Boolean(document[fullscreenControls.fullscreenElement])),\n      isFullscreen = _b[0],\n      setIsFullscreen = _b[1];\n\n  var _c = useState(document[fullscreenControls.fullscreenElement]),\n      element = _c[0],\n      setElement = _c[1];\n\n  var request = useCallback(function (element) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var finalElement, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            finalElement = element || document.documentElement;\n            return [4\n            /*yield*/\n            , finalElement[fullscreenControls.requestFullscreen](requestFullscreenOptions)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            error_1 = _a.sent();\n            console.log(error_1);\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, []);\n  var exit = useCallback(function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!element) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , document[fullscreenControls.exitFullscreen]()];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            error_2 = _a.sent();\n            console.warn(error_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [element]);\n  var toggle = useCallback(function (newElement) {\n    return element ? exit() : newElement ? request(newElement) : null;\n  }, [element]);\n  var onChangeDeprecatedHandlerRef = useRef(noop);\n  var onErrorDeprecatedHandlerRef = useRef(noop); // Hack to not break it for everyone\n  // Honestly these two functions are tragedy and must be removed in v5\n\n  var onChangeDeprecated = useCallback(function (callback) {\n    warnDeprecatedOnChangeAndOnErrorUsage();\n    return onChangeDeprecatedHandlerRef.current = callback;\n  }, []);\n  var onErrorDeprecated = useCallback(function (callback) {\n    warnDeprecatedOnChangeAndOnErrorUsage();\n    return onErrorDeprecatedHandlerRef.current = callback;\n  }, []);\n  useDocumentEventListener(fullscreenControls.fullscreenchange, function (event) {\n    var currentFullscreenElement = document[fullscreenControls.fullscreenElement];\n    var isOpen = Boolean(currentFullscreenElement);\n\n    if (isOpen) {\n      // fullscreen was enabled\n      setIsFullscreen(true);\n      setElement(currentFullscreenElement);\n    } else {\n      // fullscreen was disabled\n      setIsFullscreen(false);\n      setElement(null);\n    }\n\n    onChangeArgument === null || onChangeArgument === void 0 ? void 0 : onChangeArgument.call(document, event, isOpen);\n    onChangeDeprecatedHandlerRef.current.call(document, event, isOpen);\n  });\n  useDocumentEventListener(fullscreenControls.fullscreenerror, function (event) {\n    onErrorArgument === null || onErrorArgument === void 0 ? void 0 : onErrorArgument.call(document, event);\n    onErrorDeprecatedHandlerRef.current.call(document, event);\n  });\n  return {\n    element: element,\n    exit: exit,\n    isEnabled: Boolean(document[fullscreenControls.fullscreenEnabled]),\n    isFullscreen: isFullscreen,\n    onChange: onChangeDeprecated,\n    onError: onErrorDeprecated,\n    request: request,\n    toggle: toggle\n  };\n}\n\nexport { useFullscreen };","map":null,"metadata":{},"sourceType":"module"}