{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback, useMemo, useState } from \"react\";\nvar defaultOptions = {\n  maxSize: 100\n};\n/**\n * useUndoState hook\n * Drop in replacement for useState hook but with undo functionality.\n *\n * @typedef UndoStateOptions\n * @type {object}\n * @property {number} maxSize - Maximum number of states to keep in the undo stack.\n * @param {any} defaultValue - Default value to use for the state. This will be the first value in the undo stack.\n * @param {UseUndoStateOptions} options - Options for the undo state. Currently takes the maxSize option.\n * @returns {UseUndoStateReturnValue}\n * @see {@link https://react-hooks.org/docs/useUndoState}\n */\n\nvar useUndoState = function (defaultValue, options) {\n  var maxSize = useMemo(function () {\n    return __assign(__assign({}, defaultOptions), options);\n  }, [options]).maxSize;\n\n  var _a = useState([defaultValue]),\n      value = _a[0],\n      setValue = _a[1];\n\n  var push = useCallback(function (argument) {\n    return setValue(function (current) {\n      var restValues = current.length >= maxSize ? current.slice(0, maxSize) : current;\n\n      if (typeof argument === \"function\") {\n        // I dislike this type assertion, but it's the only way to get the type to match\n        // as the type guard doesn't seem to be working here.\n        return __spreadArray([argument(current[0])], restValues, true);\n      } else {\n        return __spreadArray([argument], restValues, true);\n      }\n    });\n  }, [maxSize]);\n  var undo = useCallback(function () {\n    setValue(function (current) {\n      if (current.length === 1) {\n        return current;\n      }\n\n      var values = current.slice(1);\n      return values;\n    });\n  }, []);\n  return [value[0], push, undo];\n};\n\nexport { useUndoState };","map":null,"metadata":{},"sourceType":"module"}