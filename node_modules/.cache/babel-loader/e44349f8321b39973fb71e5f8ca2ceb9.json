{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\n *  useDidUpdate hook\n *\n *  Fires a callback on component update\n *  Can take in a list of conditions to fire callback when one of the\n *  conditions changes\n *\n * @param {Function} callback The callback to be called on update\n * @param {Array} conditions The list of variables which trigger update when they are changed\n */\n\nfunction useDidUpdate(callback, conditions) {\n  var hasMountedRef = useRef(false);\n\n  if (typeof conditions !== \"undefined\" && !Array.isArray(conditions)) {\n    conditions = [conditions];\n  } else if (Array.isArray(conditions) && conditions.length === 0) {\n    console.warn(\"Using [] as the second argument makes useDidUpdate a noop. The second argument should either be `undefined` or an array of length greater than 0.\");\n  }\n\n  useEffect(function () {\n    if (hasMountedRef.current) {\n      callback();\n    } else {\n      hasMountedRef.current = true;\n    }\n  }, conditions);\n  useEffect(function () {\n    return function () {\n      hasMountedRef.current = false;\n    };\n  }, []);\n}\n\nexport { useDidUpdate };","map":null,"metadata":{},"sourceType":"module"}