{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, TOUCH, Spherical, Vector2, Quaternion, PerspectiveCamera, OrthographicCamera, MOUSE } from 'three';\nlet STATE;\n\n(function (STATE) {\n  STATE[STATE[\"NONE\"] = -1] = \"NONE\";\n  STATE[STATE[\"ROTATE\"] = 0] = \"ROTATE\";\n  STATE[STATE[\"DOLLY\"] = 1] = \"DOLLY\";\n  STATE[STATE[\"PAN\"] = 2] = \"PAN\";\n  STATE[STATE[\"TOUCH_ROTATE\"] = 3] = \"TOUCH_ROTATE\";\n  STATE[STATE[\"TOUCH_PAN\"] = 4] = \"TOUCH_PAN\";\n  STATE[STATE[\"TOUCH_DOLLY_PAN\"] = 5] = \"TOUCH_DOLLY_PAN\";\n  STATE[STATE[\"TOUCH_DOLLY_ROTATE\"] = 6] = \"TOUCH_DOLLY_ROTATE\";\n})(STATE || (STATE = {}));\n\nclass CameraControls extends EventDispatcher {\n  /** Set to false to disable this control */\n\n  /** \"target\" sets the location of focus, where the object orbits around */\n\n  /** Set to true to enable trackball behavior */\n\n  /** How far you can dolly in ( PerspectiveCamera only ) */\n\n  /** How far you can dolly out ( PerspectiveCamera only ) */\n  // How far you can zoom in and out ( OrthographicCamera only )\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n  // radians\n  // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n\n  /**\n   * This option enables dollying in and out; property named as \"zoom\" for backwards compatibility\n   * Set to false to disable zooming\n   */\n\n  /** Set to false to disable rotating */\n\n  /** Set to false to disable panning */\n\n  /** if true, pan in screen-space */\n\n  /** pixels moved per arrow key push */\n\n  /**\n   * Set to true to automatically rotate around the target\n   * If auto-rotate is enabled, you must call controls.update() in your animation loop\n   * auto-rotate is not supported for trackball behavior\n   */\n  // 30 seconds per round when fps is 60\n\n  /** Set to false to disable use of the keys */\n\n  /** The four arrow keys */\n\n  /** Touch fingers */\n  // for reset\n  // current position in spherical coordinates\n  constructor(object, domElement) {\n    super();\n\n    _defineProperty(this, \"object\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"enabled\", true);\n\n    _defineProperty(this, \"target\", new Vector3());\n\n    _defineProperty(this, \"trackball\", false);\n\n    _defineProperty(this, \"minDistance\", 0);\n\n    _defineProperty(this, \"maxDistance\", Infinity);\n\n    _defineProperty(this, \"minZoom\", 0);\n\n    _defineProperty(this, \"maxZoom\", Infinity);\n\n    _defineProperty(this, \"minPolarAngle\", 0);\n\n    _defineProperty(this, \"maxPolarAngle\", Math.PI);\n\n    _defineProperty(this, \"minAzimuthAngle\", -Infinity);\n\n    _defineProperty(this, \"maxAzimuthAngle\", Infinity);\n\n    _defineProperty(this, \"enableDamping\", false);\n\n    _defineProperty(this, \"dampingFactor\", 0.05);\n\n    _defineProperty(this, \"enableZoom\", true);\n\n    _defineProperty(this, \"zoomSpeed\", 1.0);\n\n    _defineProperty(this, \"enableRotate\", true);\n\n    _defineProperty(this, \"rotateSpeed\", 1.0);\n\n    _defineProperty(this, \"enablePan\", true);\n\n    _defineProperty(this, \"panSpeed\", 1.0);\n\n    _defineProperty(this, \"screenSpacePanning\", false);\n\n    _defineProperty(this, \"keyPanSpeed\", 7.0);\n\n    _defineProperty(this, \"autoRotate\", false);\n\n    _defineProperty(this, \"autoRotateSpeed\", 2.0);\n\n    _defineProperty(this, \"enableKeys\", true);\n\n    _defineProperty(this, \"keys\", {\n      LEFT: 'ArrowLeft',\n      UP: 'ArrowUp',\n      RIGHT: 'ArrowRight',\n      BOTTOM: 'ArrowDown'\n    });\n\n    _defineProperty(this, \"mouseButtons\", void 0);\n\n    _defineProperty(this, \"touches\", {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    });\n\n    _defineProperty(this, \"target0\", void 0);\n\n    _defineProperty(this, \"position0\", void 0);\n\n    _defineProperty(this, \"quaternion0\", void 0);\n\n    _defineProperty(this, \"zoom0\", void 0);\n\n    _defineProperty(this, \"spherical\", new Spherical());\n\n    _defineProperty(this, \"sphericalDelta\", new Spherical());\n\n    _defineProperty(this, \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(this, \"startEvent\", {\n      type: 'start'\n    });\n\n    _defineProperty(this, \"endEvent\", {\n      type: 'end'\n    });\n\n    _defineProperty(this, \"state\", STATE.NONE);\n\n    _defineProperty(this, \"EPS\", 0.000001);\n\n    _defineProperty(this, \"scale\", 1);\n\n    _defineProperty(this, \"panOffset\", new Vector3());\n\n    _defineProperty(this, \"zoomChanged\", false);\n\n    _defineProperty(this, \"rotateStart\", new Vector2());\n\n    _defineProperty(this, \"rotateEnd\", new Vector2());\n\n    _defineProperty(this, \"rotateDelta\", new Vector2());\n\n    _defineProperty(this, \"panStart\", new Vector2());\n\n    _defineProperty(this, \"panEnd\", new Vector2());\n\n    _defineProperty(this, \"panDelta\", new Vector2());\n\n    _defineProperty(this, \"dollyStart\", new Vector2());\n\n    _defineProperty(this, \"dollyEnd\", new Vector2());\n\n    _defineProperty(this, \"dollyDelta\", new Vector2());\n\n    _defineProperty(this, \"offset\", new Vector3());\n\n    _defineProperty(this, \"lastPosition\", new Vector3());\n\n    _defineProperty(this, \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"q\", new Quaternion());\n\n    _defineProperty(this, \"v\", new Vector3());\n\n    _defineProperty(this, \"vec\", new Vector3());\n\n    _defineProperty(this, \"quat\", void 0);\n\n    _defineProperty(this, \"quatInverse\", void 0);\n\n    _defineProperty(this, \"getPolarAngle\", () => this.spherical.phi);\n\n    _defineProperty(this, \"getAzimuthalAngle\", () => this.spherical.theta);\n\n    _defineProperty(this, \"saveState\", () => {\n      this.target0.copy(this.target);\n      this.position0.copy(this.object.position);\n      this.quaternion0.copy(this.object.quaternion);\n      this.zoom0 = this.object.zoom;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      this.target.copy(this.target0);\n      this.object.position.copy(this.position0);\n      this.object.quaternion.copy(this.quaternion0);\n      this.object.zoom = this.zoom0;\n      this.object.updateProjectionMatrix();\n      this.dispatchEvent(this.changeEvent);\n      this.update();\n      this.state = STATE.NONE;\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      this.domElement.removeEventListener('contextmenu', this.onContextMenu, false);\n      this.domElement.removeEventListener('mousedown', this.onMouseDown, false);\n      this.domElement.removeEventListener('wheel', this.onMouseWheel, false);\n      this.domElement.removeEventListener('touchstart', this.onTouchStart, false);\n      this.domElement.removeEventListener('touchend', this.onTouchEnd, false);\n      this.domElement.removeEventListener('touchmove', this.onTouchMove, false);\n      document.removeEventListener('mousemove', this.onMouseMove, false);\n      document.removeEventListener('mouseup', this.onMouseUp, false);\n      this.domElement.removeEventListener('keydown', this.onKeyDown, false); //this.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    });\n\n    _defineProperty(this, \"update\", () => {\n      const position = this.object.position;\n      this.offset.copy(position).sub(this.target);\n\n      if (this.trackball) {\n        // rotate around screen-space y-axis\n        if (this.sphericalDelta.theta) {\n          this.vec.set(0, 1, 0).applyQuaternion(this.object.quaternion);\n          const factor = this.enableDamping ? this.dampingFactor : 1;\n          this.q.setFromAxisAngle(this.vec, this.sphericalDelta.theta * factor);\n          this.object.quaternion.premultiply(this.q);\n          this.offset.applyQuaternion(this.q);\n        } // rotate around screen-space x-axis\n\n\n        if (this.sphericalDelta.phi) {\n          this.vec.set(1, 0, 0).applyQuaternion(this.object.quaternion);\n          const factor = this.enableDamping ? this.dampingFactor : 1;\n          this.q.setFromAxisAngle(this.vec, this.sphericalDelta.phi * factor);\n          this.object.quaternion.premultiply(this.q);\n          this.offset.applyQuaternion(this.q);\n        }\n\n        this.offset.multiplyScalar(this.scale);\n        this.offset.clampLength(this.minDistance, this.maxDistance);\n      } else {\n        // rotate offset to \"y-axis-is-up\" space\n        this.offset.applyQuaternion(this.quat);\n\n        if (this.autoRotate && this.state === STATE.NONE) {\n          this.rotateLeft(this.getAutoRotationAngle());\n        }\n\n        this.spherical.setFromVector3(this.offset);\n\n        if (this.enableDamping) {\n          this.spherical.theta += this.sphericalDelta.theta * this.dampingFactor;\n          this.spherical.phi += this.sphericalDelta.phi * this.dampingFactor;\n        } else {\n          this.spherical.theta += this.sphericalDelta.theta;\n          this.spherical.phi += this.sphericalDelta.phi;\n        } // restrict theta to be between desired limits\n\n\n        this.spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this.spherical.theta)); // restrict phi to be between desired limits\n\n        this.spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this.spherical.phi));\n        this.spherical.makeSafe();\n        this.spherical.radius *= this.scale; // restrict radius to be between desired limits\n\n        this.spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this.spherical.radius));\n        this.offset.setFromSpherical(this.spherical); // rotate offset back to \"camera-up-vector-is-up\" space\n\n        this.offset.applyQuaternion(this.quatInverse);\n      } // move target to panned location\n\n\n      if (this.enableDamping === true) {\n        this.target.addScaledVector(this.panOffset, this.dampingFactor);\n      } else {\n        this.target.add(this.panOffset);\n      }\n\n      position.copy(this.target).add(this.offset);\n\n      if (this.trackball === false) {\n        this.object.lookAt(this.target);\n      }\n\n      if (this.enableDamping === true) {\n        this.sphericalDelta.theta *= 1 - this.dampingFactor;\n        this.sphericalDelta.phi *= 1 - this.dampingFactor;\n        this.panOffset.multiplyScalar(1 - this.dampingFactor);\n      } else {\n        this.sphericalDelta.set(0, 0, 0);\n        this.panOffset.set(0, 0, 0);\n      }\n\n      this.scale = 1; // update condition is:\n      // min(camera displacement, camera rotation in radians)^2 > EPS\n      // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n      if (this.zoomChanged || this.lastPosition.distanceToSquared(this.object.position) > this.EPS || 8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n        this.dispatchEvent(this.changeEvent);\n        this.lastPosition.copy(this.object.position);\n        this.lastQuaternion.copy(this.object.quaternion);\n        this.zoomChanged = false;\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getAutoRotationAngle\", () => 2 * Math.PI / 60 / 60 * this.autoRotateSpeed);\n\n    _defineProperty(this, \"getZoomScale\", () => Math.pow(0.95, this.zoomSpeed));\n\n    _defineProperty(this, \"rotateLeft\", angle => {\n      this.sphericalDelta.theta -= angle;\n    });\n\n    _defineProperty(this, \"rotateUp\", angle => {\n      this.sphericalDelta.phi -= angle;\n    });\n\n    _defineProperty(this, \"panLeft\", (distance, objectMatrix) => {\n      this.v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\n      this.v.multiplyScalar(-distance);\n      this.panOffset.add(this.v);\n    });\n\n    _defineProperty(this, \"panUp\", (distance, objectMatrix) => {\n      if (this.screenSpacePanning === true) {\n        this.v.setFromMatrixColumn(objectMatrix, 1);\n      } else {\n        this.v.setFromMatrixColumn(objectMatrix, 0);\n        this.v.crossVectors(this.object.up, this.v);\n      }\n\n      this.v.multiplyScalar(distance);\n      this.panOffset.add(this.v);\n    });\n\n    _defineProperty(this, \"pan\", (deltaX, deltaY) => {\n      const element = this.domElement;\n\n      if (this.object instanceof PerspectiveCamera) {\n        // perspective\n        const position = this.object.position;\n        this.offset.copy(position).sub(this.target);\n        let targetDistance = this.offset.length(); // half of the fov is center to top of screen\n\n        targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed\n\n        this.panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n        this.panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n      } else if (this.object.isOrthographicCamera) {\n        // orthographic\n        this.panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n        this.panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n      } else {\n        // camera neither orthographic nor perspective\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - pan disabled.');\n        this.enablePan = false;\n      }\n    });\n\n    _defineProperty(this, \"dollyIn\", dollyScale => {\n      // TODO: replace w/.isPerspectiveCamera ?\n      if (this.object instanceof PerspectiveCamera) {\n        this.scale /= dollyScale; // TODO: replace w/.isOrthographicCamera ?\n      } else if (this.object instanceof OrthographicCamera) {\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * dollyScale));\n        this.object.updateProjectionMatrix();\n        this.zoomChanged = true;\n      } else {\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        this.enableZoom = false;\n      }\n    });\n\n    _defineProperty(this, \"dollyOut\", dollyScale => {\n      // TODO: replace w/.isPerspectiveCamera ?\n      if (this.object instanceof PerspectiveCamera) {\n        this.scale *= dollyScale; // TODO: replace w/.isOrthographicCamera ?\n      } else if (this.object instanceof OrthographicCamera) {\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / dollyScale));\n        this.object.updateProjectionMatrix();\n        this.zoomChanged = true;\n      } else {\n        console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        this.enableZoom = false;\n      }\n    });\n\n    _defineProperty(this, \"handleMouseDownRotate\", event => {\n      this.rotateStart.set(event.clientX, event.clientY);\n    });\n\n    _defineProperty(this, \"handleMouseDownDolly\", event => {\n      this.dollyStart.set(event.clientX, event.clientY);\n    });\n\n    _defineProperty(this, \"handleMouseDownPan\", event => {\n      this.panStart.set(event.clientX, event.clientY);\n    });\n\n    _defineProperty(this, \"handleMouseMoveRotate\", event => {\n      this.rotateEnd.set(event.clientX, event.clientY);\n      this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n      const element = this.domElement;\n      this.rotateLeft(2 * Math.PI * this.rotateDelta.x / element.clientHeight); // yes, height\n\n      this.rotateUp(2 * Math.PI * this.rotateDelta.y / element.clientHeight);\n      this.rotateStart.copy(this.rotateEnd);\n      this.update();\n    });\n\n    _defineProperty(this, \"handleMouseMoveDolly\", event => {\n      this.dollyEnd.set(event.clientX, event.clientY);\n      this.dollyDelta.subVectors(this.dollyEnd, this.dollyStart);\n\n      if (this.dollyDelta.y > 0) {\n        this.dollyIn(this.getZoomScale());\n      } else if (this.dollyDelta.y < 0) {\n        this.dollyOut(this.getZoomScale());\n      }\n\n      this.dollyStart.copy(this.dollyEnd);\n      this.update();\n    });\n\n    _defineProperty(this, \"handleMouseMovePan\", event => {\n      this.panEnd.set(event.clientX, event.clientY);\n      this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed);\n      this.pan(this.panDelta.x, this.panDelta.y);\n      this.panStart.copy(this.panEnd);\n      this.update();\n    });\n\n    _defineProperty(this, \"handleMouseWheel\", event => {\n      if (event.deltaY < 0) {\n        this.dollyOut(this.getZoomScale());\n      } else if (event.deltaY > 0) {\n        this.dollyIn(this.getZoomScale());\n      }\n\n      this.update();\n    });\n\n    _defineProperty(this, \"handleKeyDown\", event => {\n      let needsUpdate = false;\n\n      switch (event.code) {\n        case this.keys.UP:\n          this.pan(0, this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n\n        case this.keys.BOTTOM:\n          this.pan(0, -this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n\n        case this.keys.LEFT:\n          this.pan(this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n\n        case this.keys.RIGHT:\n          this.pan(-this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n        this.update();\n      }\n    });\n\n    _defineProperty(this, \"handleTouchStartRotate\", event => {\n      if (event.touches.length == 1) {\n        this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.rotateStart.set(x, y);\n      }\n    });\n\n    _defineProperty(this, \"handleTouchStartPan\", event => {\n      if (event.touches.length == 1) {\n        this.panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.panStart.set(x, y);\n      }\n    });\n\n    _defineProperty(this, \"handleTouchStartDolly\", event => {\n      const dx = event.touches[0].pageX - event.touches[1].pageX;\n      const dy = event.touches[0].pageY - event.touches[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      this.dollyStart.set(0, distance);\n    });\n\n    _defineProperty(this, \"handleTouchStartDollyPan\", event => {\n      if (this.enableZoom) this.handleTouchStartDolly(event);\n      if (this.enablePan) this.handleTouchStartPan(event);\n    });\n\n    _defineProperty(this, \"handleTouchStartDollyRotate\", event => {\n      if (this.enableZoom) this.handleTouchStartDolly(event);\n      if (this.enableRotate) this.handleTouchStartRotate(event);\n    });\n\n    _defineProperty(this, \"handleTouchMoveRotate\", event => {\n      if (event.touches.length == 1) {\n        this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.rotateEnd.set(x, y);\n      }\n\n      this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n      const element = this.domElement;\n      this.rotateLeft(2 * Math.PI * this.rotateDelta.x / element.clientHeight); // yes, height\n\n      this.rotateUp(2 * Math.PI * this.rotateDelta.y / element.clientHeight);\n      this.rotateStart.copy(this.rotateEnd);\n    });\n\n    _defineProperty(this, \"handleTouchMovePan\", event => {\n      if (event.touches.length == 1) {\n        this.panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.panEnd.set(x, y);\n      }\n\n      this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed);\n      this.pan(this.panDelta.x, this.panDelta.y);\n      this.panStart.copy(this.panEnd);\n    });\n\n    _defineProperty(this, \"handleTouchMoveDolly\", event => {\n      const dx = event.touches[0].pageX - event.touches[1].pageX;\n      const dy = event.touches[0].pageY - event.touches[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      this.dollyEnd.set(0, distance);\n      this.dollyDelta.set(0, Math.pow(this.dollyEnd.y / this.dollyStart.y, this.zoomSpeed));\n      this.dollyIn(this.dollyDelta.y);\n      this.dollyStart.copy(this.dollyEnd);\n    });\n\n    _defineProperty(this, \"handleTouchMoveDollyPan\", event => {\n      if (this.enableZoom) this.handleTouchMoveDolly(event);\n      if (this.enablePan) this.handleTouchMovePan(event);\n    });\n\n    _defineProperty(this, \"handleTouchMoveDollyRotate\", event => {\n      if (this.enableZoom) this.handleTouchMoveDolly(event);\n      if (this.enableRotate) this.handleTouchMoveRotate(event);\n    });\n\n    _defineProperty(this, \"onMouseDown\", event => {\n      if (this.enabled === false) return; // Prevent the browser from scrolling.\n\n      event.preventDefault(); // Manually set the focus since calling preventDefault above\n      // prevents the browser from setting it automatically.\n\n      this.domElement.focus ? this.domElement.focus() : window.focus();\n      let mouseAction;\n\n      switch (event.button) {\n        case 0:\n          mouseAction = this.mouseButtons.LEFT;\n          break;\n\n        case 1:\n          mouseAction = this.mouseButtons.MIDDLE;\n          break;\n\n        case 2:\n          mouseAction = this.mouseButtons.RIGHT;\n          break;\n\n        default:\n          mouseAction = -1;\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (this.enableZoom === false) return;\n          this.handleMouseDownDolly(event);\n          this.state = STATE.DOLLY;\n          break;\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enablePan === false) return;\n            this.handleMouseDownPan(event);\n            this.state = STATE.PAN;\n          } else {\n            if (this.enableRotate === false) return;\n            this.handleMouseDownRotate(event);\n            this.state = STATE.ROTATE;\n          }\n\n          break;\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate === false) return;\n            this.handleMouseDownRotate(event);\n            this.state = STATE.ROTATE;\n          } else {\n            if (this.enablePan === false) return;\n            this.handleMouseDownPan(event);\n            this.state = STATE.PAN;\n          }\n\n          break;\n\n        default:\n          this.state = STATE.NONE;\n      }\n\n      if (this.state !== STATE.NONE) {\n        document.addEventListener('mousemove', this.onMouseMove, false);\n        document.addEventListener('mouseup', this.onMouseUp, false);\n        this.dispatchEvent(this.startEvent);\n      }\n    });\n\n    _defineProperty(this, \"onMouseMove\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n\n      switch (this.state) {\n        case STATE.ROTATE:\n          if (this.enableRotate === false) return;\n          this.handleMouseMoveRotate(event);\n          break;\n\n        case STATE.DOLLY:\n          if (this.enableZoom === false) return;\n          this.handleMouseMoveDolly(event);\n          break;\n\n        case STATE.PAN:\n          if (this.enablePan === false) return;\n          this.handleMouseMovePan(event);\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onMouseUp\", () => {\n      if (this.enabled === false) return; // this.handleMouseUp()\n\n      document.removeEventListener('mousemove', this.onMouseMove, false);\n      document.removeEventListener('mouseup', this.onMouseUp, false);\n      this.dispatchEvent(this.endEvent);\n      this.state = STATE.NONE;\n    });\n\n    _defineProperty(this, \"onMouseWheel\", event => {\n      if (this.enabled === false || this.enableZoom === false || this.state !== STATE.NONE && this.state !== STATE.ROTATE) {\n        return;\n      }\n\n      event.preventDefault();\n      this.dispatchEvent(this.startEvent);\n      this.handleMouseWheel(event);\n      this.dispatchEvent(this.endEvent);\n    });\n\n    _defineProperty(this, \"onKeyDown\", event => {\n      if (this.enabled === false || this.enableKeys === false || this.enablePan === false) return;\n      this.handleKeyDown(event);\n    });\n\n    _defineProperty(this, \"onTouchStart\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n\n      switch (event.touches.length) {\n        case 1:\n          switch (this.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (this.enableRotate === false) return;\n              this.handleTouchStartRotate(event);\n              this.state = STATE.TOUCH_ROTATE;\n              break;\n\n            case TOUCH.PAN:\n              if (this.enablePan === false) return;\n              this.handleTouchStartPan(event);\n              this.state = STATE.TOUCH_PAN;\n              break;\n\n            default:\n              this.state = STATE.NONE;\n          }\n\n          break;\n\n        case 2:\n          switch (this.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (this.enableZoom === false && this.enablePan === false) return;\n              this.handleTouchStartDollyPan(event);\n              this.state = STATE.TOUCH_DOLLY_PAN;\n              break;\n\n            case TOUCH.DOLLY_ROTATE:\n              if (this.enableZoom === false && this.enableRotate === false) return;\n              this.handleTouchStartDollyRotate(event);\n              this.state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n\n            default:\n              this.state = STATE.NONE;\n          }\n\n          break;\n\n        default:\n          this.state = STATE.NONE;\n      }\n\n      if (this.state !== STATE.NONE) {\n        this.dispatchEvent(this.startEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTouchMove\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n\n      switch (this.state) {\n        case STATE.TOUCH_ROTATE:\n          if (this.enableRotate === false) return;\n          this.handleTouchMoveRotate(event);\n          this.update();\n          break;\n\n        case STATE.TOUCH_PAN:\n          if (this.enablePan === false) return;\n          this.handleTouchMovePan(event);\n          this.update();\n          break;\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (this.enableZoom === false && this.enablePan === false) return;\n          this.handleTouchMoveDollyPan(event);\n          this.update();\n          break;\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (this.enableZoom === false && this.enableRotate === false) return;\n          this.handleTouchMoveDollyRotate(event);\n          this.update();\n          break;\n\n        default:\n          this.state = STATE.NONE;\n      }\n    });\n\n    _defineProperty(this, \"onTouchEnd\", () => {\n      if (this.enabled === false) return; // this.handleTouchEnd()\n\n      this.dispatchEvent(this.endEvent);\n      this.state = STATE.NONE;\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n    });\n\n    if (domElement === undefined) {\n      console.warn('THREE.CameraControls: The second parameter \"domElement\" is now mandatory.');\n    }\n\n    if (domElement instanceof Document) {\n      console.error('THREE.CameraControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n    }\n\n    this.object = object;\n    this.domElement = domElement;\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    }; // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.quaternion0 = this.object.quaternion.clone();\n    this.zoom0 = this.object.zoom; //\n    // internals\n    //\n    // so camera.up is the orbit axis\n\n    this.quat = new Quaternion().setFromUnitVectors(this.object.up, new Vector3(0, 1, 0));\n    this.quatInverse = this.quat.clone().invert();\n    this.lastPosition = new Vector3();\n    this.lastQuaternion = new Quaternion();\n    this.domElement.addEventListener('contextmenu', this.onContextMenu, false);\n    this.domElement.addEventListener('mousedown', this.onMouseDown, false);\n    this.domElement.addEventListener('wheel', this.onMouseWheel, false);\n    this.domElement.addEventListener('touchstart', this.onTouchStart, false);\n    this.domElement.addEventListener('touchend', this.onTouchEnd, false);\n    this.domElement.addEventListener('touchmove', this.onTouchMove, false);\n    this.domElement.addEventListener('keydown', this.onKeyDown, false); // make sure element can receive keys.\n\n    if (this.domElement.tabIndex === -1) {\n      this.domElement.tabIndex = 0;\n    } // force an update at start\n\n\n    this.object.lookAt(this.target);\n    this.update();\n    this.saveState();\n  }\n\n  handleMouseUp() {// no-op\n  }\n\n  handleTouchEnd() {// no-op\n  } //\n  // event handlers - FSM: listen for events and reset state\n  //\n\n\n}\n/**\n * OrbitControls maintains the \"up\" direction, camera.up (+Y by default).\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\n\n\nclass OrbitControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n\n    _defineProperty(this, \"mouseButtons\", void 0);\n\n    _defineProperty(this, \"touches\", void 0);\n\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n  }\n\n}\n/**\n * MapControls maintains the \"up\" direction, camera.up (+Y by default)\n *\n * @event Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - left mouse, or left right + ctrl/meta/shiftKey, or arrow keys / touch: one-finger move\n */\n\n\nclass MapControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n\n    _defineProperty(this, \"mouseButtons\", void 0);\n\n    _defineProperty(this, \"touches\", void 0);\n\n    this.mouseButtons = {\n      LEFT: MOUSE.PAN,\n      RIGHT: MOUSE.ROTATE\n    };\n    this.touches = {\n      ONE: TOUCH.PAN,\n      TWO: TOUCH.DOLLY_ROTATE\n    };\n  }\n\n}\n/**\n * TrackballControls allows the camera to rotate over the polls and does not maintain camera.up\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\n\n\nclass TrackballControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n\n    _defineProperty(this, \"trackball\", void 0);\n\n    _defineProperty(this, \"screenSpacePanning\", void 0);\n\n    _defineProperty(this, \"autoRotate\", void 0);\n\n    _defineProperty(this, \"mouseButtons\", void 0);\n\n    _defineProperty(this, \"touches\", void 0);\n\n    this.trackball = true;\n    this.screenSpacePanning = true;\n    this.autoRotate = false;\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n  }\n\n}\n\nexport { CameraControls, MapControlsExp, OrbitControlsExp, STATE, TrackballControlsExp };","map":null,"metadata":{},"sourceType":"module"}