{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback, useMemo, useState } from \"react\";\n\nfunction useStackState(initialList) {\n  var _a = useState(__spreadArray([], initialList, true)),\n      list = _a[0],\n      setList = _a[1];\n\n  var length = list.length;\n  var listInReverse = useMemo(function () {\n    var reverseList = __spreadArray([], list, true);\n\n    reverseList.reverse();\n    return reverseList;\n  }, [list]);\n  var push = useCallback(function (item) {\n    var newList = __spreadArray(__spreadArray([], list, true), [item], false);\n\n    setList(newList);\n    return newList.length;\n  }, [list]);\n  var pop = useCallback(function () {\n    if (list.length > 0) {\n      var lastItem = list[list.length - 1];\n      setList(__spreadArray([], list.slice(0, list.length - 1), true));\n      return lastItem;\n    }\n\n    return undefined;\n  }, [list]);\n  var peek = useCallback(function () {\n    if (list.length > 0) {\n      return list[list.length - 1];\n    }\n\n    return undefined;\n  }, [list]);\n\n  var clear = function () {\n    return setList([]);\n  };\n\n  var isEmpty = useCallback(function () {\n    return list.length === 0;\n  }, [list]);\n  var controls = {\n    clear: clear,\n    isEmpty: isEmpty,\n    length: length,\n    peek: peek,\n    pop: pop,\n    push: push\n  };\n  return [list, controls, listInReverse];\n}\n\nexport { useStackState };","map":null,"metadata":{},"sourceType":"module"}