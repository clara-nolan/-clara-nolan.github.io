{"ast":null,"code":"import { intersectTri } from './ThreeRayIntersectUtilities.js';\nexport function intersectTris(geo, side, ray, offset, count, intersections) {\n  for (let i = offset, end = offset + count; i < end; i++) {\n    intersectTri(geo, side, ray, i, intersections);\n  }\n}\nexport function intersectClosestTri(geo, side, ray, offset, count) {\n  let dist = Infinity;\n  let res = null;\n\n  for (let i = offset, end = offset + count; i < end; i++) {\n    const intersection = intersectTri(geo, side, ray, i);\n\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n\n  return res;\n} // converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\n\nexport function convertRaycastIntersect(hit, object, raycaster) {\n  if (hit === null) {\n    return null;\n  }\n\n  hit.point.applyMatrix4(object.matrixWorld);\n  hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n  hit.object = object;\n\n  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {\n    return null;\n  } else {\n    return hit;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}