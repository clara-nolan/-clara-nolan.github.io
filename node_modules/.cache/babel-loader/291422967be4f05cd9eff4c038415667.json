{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from 'three';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n  constructor() {\n    let dt_size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 64;\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"goWild\", void 0);\n\n    _defineProperty(this, \"curF\", void 0);\n\n    _defineProperty(this, \"randX\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on DigitalGlitch');\n    const shader = DigitalGlitch;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms['tDisp'].value.format = LuminanceFormat;\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n}\n\nexport { GlitchPass };","map":null,"metadata":{},"sourceType":"module"}