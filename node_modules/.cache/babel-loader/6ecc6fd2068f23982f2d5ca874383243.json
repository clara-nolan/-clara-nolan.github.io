{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useRef, useEffect } from \"react\";\n/**\n * A setInterval hook that calls a callback after a interval duration\n * when a condition is true\n *\n * @param cb The callback to be invoked after interval\n * @param intervalDurationMs Amount of time in ms after which to invoke\n * @param when The condition which when true, sets the interval\n * @param startImmediate If the callback should be invoked immediately\n */\n\nfunction useIntervalWhen(callback_, intervalDurationMs, when, startImmediate) {\n  if (intervalDurationMs === void 0) {\n    intervalDurationMs = 0;\n  }\n\n  if (when === void 0) {\n    when = true;\n  }\n\n  if (startImmediate === void 0) {\n    startImmediate = false;\n  }\n\n  var savedRefCallback = useRef();\n  useEffect(function () {\n    savedRefCallback.current = callback_;\n  });\n\n  function callback() {\n    savedRefCallback.current && savedRefCallback.current();\n  }\n\n  useEffect(function () {\n    if (typeof window !== \"undefined\") {\n      if (when) {\n        if (startImmediate) {\n          callback();\n        }\n\n        var interval_1 = window.setInterval(callback, intervalDurationMs);\n        return function () {\n          window.clearInterval(interval_1);\n        };\n      }\n    } else {\n      console.warn(\"useIntervalWhen: window is undefined.\");\n    }\n\n    return noop;\n  }, [when, intervalDurationMs]);\n}\n\nexport { useIntervalWhen };","map":null,"metadata":{},"sourceType":"module"}