{"ast":null,"code":"import raf from \"raf\";\nimport { useRef, useEffect } from \"react\";\nimport { noop } from \"../utils/noop\";\n/**\n *\n * useRaf\n * Uses a polyfilled version of requestAnimationFrame\n *\n * @param {Function} callback The callback function to be executed\n * @param {boolean} [isActive] The value which while true, keeps the raf running infinitely\n * @see {@link https://react-hooks.org/docs/useRaf}\n */\n\nexport function useRaf(callback, isActive) {\n  var savedCallback = useRef(); // Remember the latest function.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(function () {\n    var animationFrame;\n    var startTime = Date.now();\n\n    function tick() {\n      var _a;\n\n      var timeElapsed = Date.now() - startTime;\n      startTime = Date.now();\n      loop();\n      (_a = savedCallback.current) === null || _a === void 0 ? void 0 : _a.call(savedCallback, timeElapsed);\n    }\n\n    function loop() {\n      animationFrame = raf(tick);\n    }\n\n    if (isActive) {\n      startTime = Date.now();\n      loop();\n      return function () {\n        if (animationFrame) {\n          raf.cancel(animationFrame);\n        }\n      };\n    } else {\n      return noop;\n    }\n  }, [isActive]);\n}","map":null,"metadata":{},"sourceType":"module"}