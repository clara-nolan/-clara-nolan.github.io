{"ast":null,"code":"import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nclass SplitNode extends Node {\n  constructor(node) {\n    let components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n    super();\n    this.node = node;\n    this.components = components;\n  }\n\n  getVectorLength() {\n    let vectorLength = this.components.length;\n\n    for (const c of this.components) {\n      vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n    }\n\n    return vectorLength;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n\n  generate(builder) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n\n      if (componentsLength >= nodeTypeLength) {\n        // need expand the input node\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n\n      const nodeSnippet = node.build(builder, type);\n      return `${nodeSnippet}.${this.components}`;\n    } else {\n      // ignore components if node is a float\n      return node.build(builder);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n\n}\n\nexport default SplitNode;","map":null,"metadata":{},"sourceType":"module"}