{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial } from 'three';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on THREE.DotScreenShader');\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== undefined) this.uniforms['center'].value.copy(center);\n    if (angle !== undefined) this.uniforms['angle'].value = angle;\n    if (scale !== undefined) this.uniforms['scale'].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { DotScreenPass };","map":null,"metadata":{},"sourceType":"module"}