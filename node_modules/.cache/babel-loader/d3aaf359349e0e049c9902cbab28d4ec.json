{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\n\nconst _positionVector = /*@__PURE__*/new Vector3();\n\nconst _normalVector = /*@__PURE__*/new Vector3();\n\nconst _tangentVector = /*@__PURE__*/new Vector3();\n\nconst _tangentVector4 = /*@__PURE__*/new Vector4();\n\nconst _morphVector = /*@__PURE__*/new Vector3();\n\nconst _temp = /*@__PURE__*/new Vector3();\n\nconst _skinIndex = /*@__PURE__*/new Vector4();\n\nconst _skinWeight = /*@__PURE__*/new Vector4();\n\nconst _matrix = /*@__PURE__*/new Matrix4();\n\nconst _boneMatrix = /*@__PURE__*/new Matrix4(); // Confirms that the two provided attributes are compatible\n\n\nfunction validateAttributes(attr1, attr2) {\n  if (!attr1 && !attr2) {\n    return;\n  }\n\n  const sameCount = attr1.count === attr2.count;\n  const sameNormalized = attr1.normalized === attr2.normalized;\n  const sameType = attr1.array.constructor === attr2.array.constructor;\n  const sameItemSize = attr1.itemSize === attr2.itemSize;\n\n  if (!sameCount || !sameNormalized || !sameType || !sameItemSize) {\n    throw new Error();\n  }\n} // Clones the given attribute with a new compatible buffer attribute but no data\n\n\nfunction createAttributeClone(attr) {\n  let countOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const cons = attr.array.constructor;\n  const normalized = attr.normalized;\n  const itemSize = attr.itemSize;\n  const count = countOverride === null ? attr.count : countOverride;\n  return new BufferAttribute(new cons(itemSize * count), itemSize, normalized);\n} // target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\n\n\nfunction copyAttributeContents(attr, target) {\n  let targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (attr.isInterleavedBufferAttribute) {\n    const itemSize = attr.itemSize;\n\n    for (let i = 0, l = attr.count; i < l; i++) {\n      const io = i + targetOffset;\n      target.setX(io, attr.getX(i));\n      if (itemSize >= 2) target.setY(io, attr.getY(i));\n      if (itemSize >= 3) target.setZ(io, attr.getZ(i));\n      if (itemSize >= 4) target.setW(io, attr.getW(i));\n    }\n  } else {\n    const array = target.array;\n    const cons = array.constructor;\n    const byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n    const temp = new cons(array.buffer, byteOffset, attr.array.length);\n    temp.set(attr.array);\n  }\n} // Adds the \"matrix\" multiplied by \"scale\" to \"target\"\n\n\nfunction addScaledMatrix(target, matrix, scale) {\n  const targetArray = target.elements;\n  const matrixArray = matrix.elements;\n\n  for (let i = 0, l = matrixArray.length; i < l; i++) {\n    targetArray[i] += matrixArray[i] * scale;\n  }\n} // A version of \"SkinnedMesh.boneTransform\" for normals\n\n\nfunction boneNormalTransform(mesh, index, target) {\n  const skeleton = mesh.skeleton;\n  const geometry = mesh.geometry;\n  const bones = skeleton.bones;\n  const boneInverses = skeleton.boneInverses;\n\n  _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n  _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n  _matrix.elements.fill(0);\n\n  for (let i = 0; i < 4; i++) {\n    const weight = _skinWeight.getComponent(i);\n\n    if (weight !== 0) {\n      const boneIndex = _skinIndex.getComponent(i);\n\n      _boneMatrix.multiplyMatrices(bones[boneIndex].matrixWorld, boneInverses[boneIndex]);\n\n      addScaledMatrix(_matrix, _boneMatrix, weight);\n    }\n  }\n\n  _matrix.multiply(mesh.bindMatrix).premultiply(mesh.bindMatrixInverse);\n\n  target.transformDirection(_matrix);\n  return target;\n} // Applies the morph target data to the target vector\n\n\nfunction applyMorphTarget(morphData, morphInfluences, morphTargetsRelative, i, target) {\n  _morphVector.set(0, 0, 0);\n\n  for (let j = 0, jl = morphData.length; j < jl; j++) {\n    const influence = morphInfluences[j];\n    const morphAttribute = morphData[j];\n    if (influence === 0) continue;\n\n    _temp.fromBufferAttribute(morphAttribute, i);\n\n    if (morphTargetsRelative) {\n      _morphVector.addScaledVector(_temp, influence);\n    } else {\n      _morphVector.addScaledVector(_temp.sub(target), influence);\n    }\n  }\n\n  target.add(_morphVector);\n} // Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in plac\n\n\nfunction mergeBufferGeometries(geometries) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    useGroups: false,\n    updateIndex: false\n  };\n  let targetGeometry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new BufferGeometry();\n  const isIndexed = geometries[0].index !== null;\n  const {\n    useGroups,\n    updateIndex\n  } = options;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const attributes = {};\n  let offset = 0;\n\n  for (let i = 0; i < geometries.length; ++i) {\n    const geometry = geometries[i];\n    let attributesCount = 0; // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geometry.index !== null)) {\n      throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n    } // gather attributes, exit early if they're different\n\n\n    for (const name in geometry.attributes) {\n      if (!attributesUsed.has(name)) {\n        throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n      }\n\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n\n      attributes[name].push(geometry.attributes[name]);\n      attributesCount++;\n    } // ensure geometries have the same number of attributes\n\n\n    if (attributesCount !== attributesUsed.size) {\n      throw new Error('StaticGeometryGenerator: Make sure all geometries have the same number of attributes.');\n    }\n\n    if (useGroups) {\n      let count;\n\n      if (isIndexed) {\n        count = geometry.index.count;\n      } else if (geometry.attributes.position !== undefined) {\n        count = geometry.attributes.position.count;\n      } else {\n        throw new Error('StaticGeometryGenerator: The geometry must have either an index or a position attribute');\n      }\n\n      targetGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  } // merge indices\n\n\n  if (isIndexed) {\n    let forceUpateIndex = false;\n\n    if (!targetGeometry.index) {\n      let indexCount = 0;\n\n      for (let i = 0; i < geometries.length; ++i) {\n        indexCount += geometries[i].index.count;\n      }\n\n      targetGeometry.setIndex(new BufferAttribute(new Uint32Array(indexCount), 1, false));\n      forceUpateIndex = true;\n    }\n\n    if (updateIndex || forceUpateIndex) {\n      const targetIndex = targetGeometry.index;\n      let targetOffset = 0;\n      let indexOffset = 0;\n\n      for (let i = 0; i < geometries.length; ++i) {\n        const geometry = geometries[i];\n        const index = geometry.index;\n\n        for (let j = 0; j < index.count; ++j) {\n          targetIndex.setX(targetOffset, index.getX(j) + indexOffset);\n          targetOffset++;\n        }\n\n        indexOffset += geometry.attributes.position.count;\n      }\n    }\n  } // merge attributes\n\n\n  for (const name in attributes) {\n    const attrList = attributes[name];\n\n    if (!(name in targetGeometry.attributes)) {\n      let count = 0;\n\n      for (const key in attrList) {\n        count += attrList[key].count;\n      }\n\n      targetGeometry.setAttribute(name, createAttributeClone(attributes[name][0], count));\n    }\n\n    const targetAttribute = targetGeometry.attributes[name];\n    let offset = 0;\n\n    for (const key in attrList) {\n      const attr = attrList[key];\n      copyAttributeContents(attr, targetAttribute, offset);\n      offset += attr.count;\n    }\n  }\n\n  return targetGeometry;\n}\n\nexport class StaticGeometryGenerator {\n  constructor(meshes) {\n    if (!Array.isArray(meshes)) {\n      meshes = [meshes];\n    }\n\n    const finalMeshes = [];\n    meshes.forEach(object => {\n      object.traverse(c => {\n        if (c.isMesh) {\n          finalMeshes.push(c);\n        }\n      });\n    });\n    this.meshes = finalMeshes;\n    this.useGroups = true;\n    this.applyWorldTransforms = true;\n    this.attributes = ['position', 'normal', 'tangent', 'uv', 'uv2'];\n    this._intermediateGeometry = new Array(finalMeshes.length).fill().map(() => new BufferGeometry());\n  }\n\n  getMaterials() {\n    const materials = [];\n    this.meshes.forEach(mesh => {\n      if (Array.isArray(mesh.material)) {\n        materials.push(...mesh.material);\n      } else {\n        materials.push(mesh.material);\n      }\n    });\n    return materials;\n  }\n\n  generate() {\n    let targetGeometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    const {\n      meshes,\n      useGroups,\n      _intermediateGeometry\n    } = this;\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      const geom = _intermediateGeometry[i];\n\n      this._convertToStaticGeometry(mesh, geom);\n    }\n\n    mergeBufferGeometries(_intermediateGeometry, {\n      useGroups\n    }, targetGeometry);\n\n    for (const key in targetGeometry.attributes) {\n      targetGeometry.attributes[key].needsUpdate = true;\n    }\n\n    return targetGeometry;\n  }\n\n  _convertToStaticGeometry(mesh) {\n    let targetGeometry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BufferGeometry();\n    const geometry = mesh.geometry;\n    const applyWorldTransforms = this.applyWorldTransforms;\n    const includeNormal = this.attributes.includes('normal');\n    const includeTangent = this.attributes.includes('tangent');\n    const attributes = geometry.attributes;\n    const targetAttributes = targetGeometry.attributes; // initialize the attributes if they don't exist\n\n    if (!targetGeometry.index) {\n      targetGeometry.index = geometry.index;\n    }\n\n    if (!targetAttributes.position) {\n      targetGeometry.setAttribute('position', createAttributeClone(attributes.position));\n    }\n\n    if (includeNormal && !targetAttributes.normal && attributes.normal) {\n      targetGeometry.setAttribute('normal', createAttributeClone(attributes.normal));\n    }\n\n    if (includeTangent && !targetAttributes.tangent && attributes.tangent) {\n      targetGeometry.setAttribute('tangent', createAttributeClone(attributes.tangent));\n    } // ensure the attributes are consistent\n\n\n    validateAttributes(geometry.index, targetGeometry.index);\n    validateAttributes(attributes.position, targetAttributes.position);\n\n    if (includeNormal) {\n      validateAttributes(attributes.normal, targetAttributes.normal);\n    }\n\n    if (includeTangent) {\n      validateAttributes(attributes.tangent, targetAttributes.tangent);\n    } // generate transformed vertex attribute data\n\n\n    const position = attributes.position;\n    const normal = includeNormal ? attributes.normal : null;\n    const tangent = includeTangent ? attributes.tangent : null;\n    const morphPosition = geometry.morphAttributes.position;\n    const morphNormal = geometry.morphAttributes.normal;\n    const morphTangent = geometry.morphAttributes.tangent;\n    const morphTargetsRelative = geometry.morphTargetsRelative;\n    const morphInfluences = mesh.morphTargetInfluences;\n    const normalMatrix = new Matrix3();\n    normalMatrix.getNormalMatrix(mesh.matrixWorld);\n\n    for (let i = 0, l = attributes.position.count; i < l; i++) {\n      _positionVector.fromBufferAttribute(position, i);\n\n      if (normal) {\n        _normalVector.fromBufferAttribute(normal, i);\n      }\n\n      if (tangent) {\n        _tangentVector4.fromBufferAttribute(tangent, i);\n\n        _tangentVector.fromBufferAttribute(tangent, i);\n      } // apply morph target transform\n\n\n      if (morphInfluences) {\n        if (morphPosition) {\n          applyMorphTarget(morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector);\n        }\n\n        if (morphNormal) {\n          applyMorphTarget(morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector);\n        }\n\n        if (morphTangent) {\n          applyMorphTarget(morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector);\n        }\n      } // apply bone transform\n\n\n      if (mesh.isSkinnedMesh) {\n        mesh.boneTransform(i, _positionVector);\n\n        if (normal) {\n          boneNormalTransform(mesh, i, _normalVector);\n        }\n\n        if (tangent) {\n          boneNormalTransform(mesh, i, _tangentVector);\n        }\n      } // update the vectors of the attributes\n\n\n      if (applyWorldTransforms) {\n        _positionVector.applyMatrix4(mesh.matrixWorld);\n      }\n\n      targetAttributes.position.setXYZ(i, _positionVector.x, _positionVector.y, _positionVector.z);\n\n      if (normal) {\n        if (applyWorldTransforms) {\n          _normalVector.applyNormalMatrix(normalMatrix);\n        }\n\n        targetAttributes.normal.setXYZ(i, _normalVector.x, _normalVector.y, _normalVector.z);\n      }\n\n      if (tangent) {\n        if (applyWorldTransforms) {\n          _tangentVector.transformDirection(mesh.matrixWorld);\n        }\n\n        targetAttributes.tangent.setXYZW(i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w);\n      }\n    } // copy other attributes over\n\n\n    for (const i in this.attributes) {\n      const key = this.attributes[i];\n\n      if (key === 'position' || key === 'tangent' || key === 'normal' || !(key in attributes)) {\n        continue;\n      }\n\n      if (!targetAttributes[key]) {\n        targetGeometry.setAttribute(key, createAttributeClone(attributes[key]));\n      }\n\n      validateAttributes(attributes[key], targetAttributes[key]);\n      copyAttributeContents(attributes[key], targetAttributes[key]);\n    }\n\n    return targetGeometry;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}