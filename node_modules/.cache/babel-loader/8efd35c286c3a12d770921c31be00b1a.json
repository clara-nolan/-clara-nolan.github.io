{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Plane, Raycaster, Vector2, Vector3, Matrix4 } from 'three';\n\nclass DragControls extends EventDispatcher {\n  constructor(_objects, _camera, _domElement) {\n    super();\n\n    _defineProperty(this, \"enabled\", true);\n\n    _defineProperty(this, \"transformGroup\", false);\n\n    _defineProperty(this, \"_objects\", void 0);\n\n    _defineProperty(this, \"_camera\", void 0);\n\n    _defineProperty(this, \"_domElement\", void 0);\n\n    _defineProperty(this, \"_plane\", new Plane());\n\n    _defineProperty(this, \"_raycaster\", new Raycaster());\n\n    _defineProperty(this, \"_mouse\", new Vector2());\n\n    _defineProperty(this, \"_offset\", new Vector3());\n\n    _defineProperty(this, \"_intersection\", new Vector3());\n\n    _defineProperty(this, \"_worldPosition\", new Vector3());\n\n    _defineProperty(this, \"_inverseMatrix\", new Matrix4());\n\n    _defineProperty(this, \"_intersections\", []);\n\n    _defineProperty(this, \"_selected\", null);\n\n    _defineProperty(this, \"_hovered\", null);\n\n    _defineProperty(this, \"activate\", () => {\n      this._domElement.addEventListener('pointermove', this.onPointerMove);\n\n      this._domElement.addEventListener('pointerdown', this.onPointerDown);\n\n      this._domElement.addEventListener('pointerup', this.onPointerCancel);\n\n      this._domElement.addEventListener('pointerleave', this.onPointerCancel);\n\n      this._domElement.addEventListener('touchmove', this.onTouchMove);\n\n      this._domElement.addEventListener('touchstart', this.onTouchStart);\n\n      this._domElement.addEventListener('touchend', this.onTouchEnd);\n    });\n\n    _defineProperty(this, \"deactivate\", () => {\n      this._domElement.removeEventListener('pointermove', this.onPointerMove);\n\n      this._domElement.removeEventListener('pointerdown', this.onPointerDown);\n\n      this._domElement.removeEventListener('pointerup', this.onPointerCancel);\n\n      this._domElement.removeEventListener('pointerleave', this.onPointerCancel);\n\n      this._domElement.removeEventListener('touchmove', this.onTouchMove);\n\n      this._domElement.removeEventListener('touchstart', this.onTouchStart);\n\n      this._domElement.removeEventListener('touchend', this.onTouchEnd);\n\n      this._domElement.style.cursor = '';\n    });\n\n    _defineProperty(this, \"dispose\", () => this.deactivate());\n\n    _defineProperty(this, \"getObjects\", () => this._objects);\n\n    _defineProperty(this, \"getRaycaster\", () => this._raycaster);\n\n    _defineProperty(this, \"onMouseMove\", event => {\n      const rect = this._domElement.getBoundingClientRect();\n\n      this._mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n\n        this.dispatchEvent({\n          type: 'drag',\n          object: this._selected\n        });\n        return;\n      }\n\n      this._intersections.length = 0;\n\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n\n      if (this._intersections.length > 0) {\n        const object = this._intersections[0].object;\n\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(object.matrixWorld));\n\n        if (this._hovered !== object) {\n          this.dispatchEvent({\n            type: 'hoveron',\n            object\n          });\n          this._domElement.style.cursor = 'pointer';\n          this._hovered = object;\n        }\n      } else {\n        if (this._hovered !== null) {\n          this.dispatchEvent({\n            type: 'hoveroff',\n            object: this._hovered\n          });\n          this._domElement.style.cursor = 'auto';\n          this._hovered = null;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onMouseDown\", () => {\n      this._intersections.length = 0;\n\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n\n        this._domElement.style.cursor = 'move';\n        this.dispatchEvent({\n          type: 'dragstart',\n          object: this._selected\n        });\n      }\n    });\n\n    _defineProperty(this, \"onMouseCancel\", () => {\n      if (this._selected) {\n        this.dispatchEvent({\n          type: 'dragend',\n          object: this._selected\n        });\n        this._selected = null;\n      }\n\n      this._domElement.style.cursor = this._hovered ? 'pointer' : 'auto';\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          this.onMouseMove(event);\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          this.onMouseDown();\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", event => {\n      switch (event.pointerType) {\n        case 'mouse':\n        case 'pen':\n          this.onMouseCancel();\n          break;\n        // TODO touch\n      }\n    });\n\n    _defineProperty(this, \"onTouchMove\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n\n      const rect = this._domElement.getBoundingClientRect();\n\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n\n        this.dispatchEvent({\n          type: 'drag',\n          object: this._selected\n        });\n        return;\n      }\n    });\n\n    _defineProperty(this, \"onTouchStart\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n\n      const rect = this._domElement.getBoundingClientRect();\n\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      this._intersections.length = 0;\n\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n\n        this._domElement.style.cursor = 'move';\n        this.dispatchEvent({\n          type: 'dragstart',\n          object: this._selected\n        });\n      }\n    });\n\n    _defineProperty(this, \"onTouchEnd\", event => {\n      event.preventDefault();\n\n      if (this._selected) {\n        this.dispatchEvent({\n          type: 'dragend',\n          object: this._selected\n        });\n        this._selected = null;\n      }\n\n      this._domElement.style.cursor = 'auto';\n    });\n\n    this._objects = _objects;\n    this._camera = _camera;\n    this._domElement = _domElement;\n    this.activate();\n  }\n\n}\n\nexport { DragControls };","map":null,"metadata":{},"sourceType":"module"}