{"ast":null,"code":"import { useState } from \"react\";\nimport { useIntervalWhen } from \"./useIntervalWhen\";\n/**\n *\n * useCountdown\n * Easy way to countdown until a given endtime in intervals\n *\n * @param endTime Time to countdown\n * @param options  Countdown options\n */\n\nfunction useCountdown(endTime, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.interval,\n      interval = _a === void 0 ? 1000 : _a,\n      onDown = options.onDown,\n      onEnd = options.onEnd;\n\n  var _b = useState(function () {\n    return new Date();\n  }),\n      time = _b[0],\n      setTime = _b[1];\n\n  var restTime = endTime.getTime() - time.getTime();\n  var count = restTime > 0 ? Math.ceil(restTime / interval) : 0;\n  useIntervalWhen(onTick, count ? interval : undefined, true, true);\n  return count;\n\n  function onTick() {\n    var newTime = new Date();\n\n    if (newTime > endTime) {\n      if (onEnd) {\n        onEnd(newTime);\n      }\n\n      setTime(endTime);\n      return;\n    }\n\n    if (onDown) {\n      onDown(restTime, newTime);\n    }\n\n    setTime(newTime);\n  }\n}\n\nexport { useCountdown };","map":null,"metadata":{},"sourceType":"module"}