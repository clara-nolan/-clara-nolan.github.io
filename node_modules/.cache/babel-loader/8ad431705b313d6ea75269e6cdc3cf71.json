{"ast":null,"code":"import { noop } from \"../utils/noop\";\nimport { useEffect } from \"react\";\nvar config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\n *\n * useMutationObserver hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\n * @param {MutationCallback} callback Function that needs to be fired on mutation\n * @param {MutationObserverInit} options\n */\n\nfunction useMutationObserver(ref, callback, options) {\n  if (options === void 0) {\n    options = config;\n  }\n\n  useEffect(function () {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      var observer_1 = new MutationObserver(callback); // Start observing the target node for configured mutations\n\n      observer_1.observe(ref.current, options);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n\n    return noop;\n  }, [callback, options]);\n}\n\nexport { useMutationObserver };","map":null,"metadata":{},"sourceType":"module"}