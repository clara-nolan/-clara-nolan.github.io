{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Quaternion, Vector3 } from 'three';\n\nfunction contextmenu(event) {\n  event.preventDefault();\n}\n\nclass FlyControls extends EventDispatcher {\n  constructor(object, _domElement) {\n    super();\n\n    _defineProperty(this, \"object\", void 0);\n\n    _defineProperty(this, \"domElement\", null);\n\n    _defineProperty(this, \"movementSpeed\", 1.0);\n\n    _defineProperty(this, \"rollSpeed\", 0.005);\n\n    _defineProperty(this, \"dragToLook\", false);\n\n    _defineProperty(this, \"autoForward\", false);\n\n    _defineProperty(this, \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(this, \"EPS\", 0.000001);\n\n    _defineProperty(this, \"tmpQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"mouseStatus\", 0);\n\n    _defineProperty(this, \"movementSpeedMultiplier\", 1);\n\n    _defineProperty(this, \"moveState\", {\n      up: 0,\n      down: 0,\n      left: 0,\n      right: 0,\n      forward: 0,\n      back: 0,\n      pitchUp: 0,\n      pitchDown: 0,\n      yawLeft: 0,\n      yawRight: 0,\n      rollLeft: 0,\n      rollRight: 0\n    });\n\n    _defineProperty(this, \"moveVector\", new Vector3(0, 0, 0));\n\n    _defineProperty(this, \"rotationVector\", new Vector3(0, 0, 0));\n\n    _defineProperty(this, \"keydown\", event => {\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.movementSpeedMultiplier = 0.1;\n          break;\n\n        case 'KeyW':\n          this.moveState.forward = 1;\n          break;\n\n        case 'KeyS':\n          this.moveState.back = 1;\n          break;\n\n        case 'KeyA':\n          this.moveState.left = 1;\n          break;\n\n        case 'KeyD':\n          this.moveState.right = 1;\n          break;\n\n        case 'KeyR':\n          this.moveState.up = 1;\n          break;\n\n        case 'KeyF':\n          this.moveState.down = 1;\n          break;\n\n        case 'ArrowUp':\n          this.moveState.pitchUp = 1;\n          break;\n\n        case 'ArrowDown':\n          this.moveState.pitchDown = 1;\n          break;\n\n        case 'ArrowLeft':\n          this.moveState.yawLeft = 1;\n          break;\n\n        case 'ArrowRight':\n          this.moveState.yawRight = 1;\n          break;\n\n        case 'KeyQ':\n          this.moveState.rollLeft = 1;\n          break;\n\n        case 'KeyE':\n          this.moveState.rollRight = 1;\n          break;\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    });\n\n    _defineProperty(this, \"keyup\", event => {\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.movementSpeedMultiplier = 1;\n          break;\n\n        case 'KeyW':\n          this.moveState.forward = 0;\n          break;\n\n        case 'KeyS':\n          this.moveState.back = 0;\n          break;\n\n        case 'KeyA':\n          this.moveState.left = 0;\n          break;\n\n        case 'KeyD':\n          this.moveState.right = 0;\n          break;\n\n        case 'KeyR':\n          this.moveState.up = 0;\n          break;\n\n        case 'KeyF':\n          this.moveState.down = 0;\n          break;\n\n        case 'ArrowUp':\n          this.moveState.pitchUp = 0;\n          break;\n\n        case 'ArrowDown':\n          this.moveState.pitchDown = 0;\n          break;\n\n        case 'ArrowLeft':\n          this.moveState.yawLeft = 0;\n          break;\n\n        case 'ArrowRight':\n          this.moveState.yawRight = 0;\n          break;\n\n        case 'KeyQ':\n          this.moveState.rollLeft = 0;\n          break;\n\n        case 'KeyE':\n          this.moveState.rollRight = 0;\n          break;\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    });\n\n    _defineProperty(this, \"pointerdown\", event => {\n      if (this.dragToLook) {\n        this.mouseStatus++;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 1;\n            break;\n\n          case 2:\n            this.moveState.back = 1;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n    });\n\n    _defineProperty(this, \"pointermove\", event => {\n      if (!this.dragToLook || this.mouseStatus > 0) {\n        const container = this.getContainerDimensions();\n        const halfWidth = container.size[0] / 2;\n        const halfHeight = container.size[1] / 2;\n        this.moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n        this.moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n        this.updateRotationVector();\n      }\n    });\n\n    _defineProperty(this, \"pointerup\", event => {\n      if (this.dragToLook) {\n        this.mouseStatus--;\n        this.moveState.yawLeft = this.moveState.pitchDown = 0;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 0;\n            break;\n\n          case 2:\n            this.moveState.back = 0;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n\n      this.updateRotationVector();\n    });\n\n    _defineProperty(this, \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"lastPosition\", new Vector3());\n\n    _defineProperty(this, \"update\", delta => {\n      const moveMult = delta * this.movementSpeed;\n      const rotMult = delta * this.rollSpeed;\n      this.object.translateX(this.moveVector.x * moveMult);\n      this.object.translateY(this.moveVector.y * moveMult);\n      this.object.translateZ(this.moveVector.z * moveMult);\n      this.tmpQuaternion.set(this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, this.rotationVector.z * rotMult, 1).normalize();\n      this.object.quaternion.multiply(this.tmpQuaternion);\n\n      if (this.lastPosition.distanceToSquared(this.object.position) > this.EPS || 8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n        this.dispatchEvent(this.changeEvent);\n        this.lastQuaternion.copy(this.object.quaternion);\n        this.lastPosition.copy(this.object.position);\n      }\n    });\n\n    _defineProperty(this, \"updateMovementVector\", () => {\n      const forward = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;\n      this.moveVector.x = -this.moveState.left + this.moveState.right;\n      this.moveVector.y = -this.moveState.down + this.moveState.up;\n      this.moveVector.z = -forward + this.moveState.back;\n    });\n\n    _defineProperty(this, \"updateRotationVector\", () => {\n      this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;\n      this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;\n      this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft;\n    });\n\n    _defineProperty(this, \"getContainerDimensions\", () => {\n      if (this.domElement != document && !(this.domElement instanceof Document)) {\n        return {\n          size: [this.domElement.offsetWidth, this.domElement.offsetHeight],\n          offset: [this.domElement.offsetLeft, this.domElement.offsetTop]\n        };\n      } else {\n        return {\n          size: [window.innerWidth, window.innerHeight],\n          offset: [0, 0]\n        };\n      }\n    });\n\n    _defineProperty(this, \"connect\", domElement => {\n      this.domElement = domElement;\n\n      if (domElement && !(domElement instanceof Document)) {\n        domElement.setAttribute('tabindex', -1);\n      }\n\n      this.domElement.addEventListener('contextmenu', contextmenu);\n      this.domElement.addEventListener('pointermove', this.pointermove);\n      this.domElement.addEventListener('pointerdown', this.pointerdown);\n      this.domElement.addEventListener('pointerup', this.pointerup);\n      window.addEventListener('keydown', this.keydown);\n      window.addEventListener('keyup', this.keyup);\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      this.domElement.removeEventListener('contextmenu', contextmenu);\n      this.domElement.removeEventListener('pointermove', this.pointermove);\n      this.domElement.removeEventListener('pointerdown', this.pointerdown);\n      this.domElement.removeEventListener('pointerup', this.pointerup);\n      window.removeEventListener('keydown', this.keydown);\n      window.removeEventListener('keyup', this.keyup);\n    });\n\n    this.object = object; // connect events\n\n    if (_domElement !== undefined) this.connect(_domElement);\n    this.updateMovementVector();\n    this.updateRotationVector();\n  }\n\n}\n\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module"}