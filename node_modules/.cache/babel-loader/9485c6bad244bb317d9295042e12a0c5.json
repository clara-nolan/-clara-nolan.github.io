{"ast":null,"code":"import React,{useEffect,useState,useCallback}from'react';import styled from'styled-components';import useStore from'../../context/mainStore';import configs from'../../configs';const{relevantStops}=configs;const MainControlerContainer=styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  position: fixed;\n  width: ${props=>props.windowWidth-30}px;\n  height: 40px;\n  padding: 0px 40px;\n  z-index: 19999;\n  border: 10px solid;\n  border-image-slice: 1;\n  border-width: 1px;\n  /* border: 1px solid ${props=>props.theme.colors.primary}; */\n  width: 100%;\n  bottom: 0px;\n  border-left-width: 0px;\n  border-right-width: 0px;\n  color: ${props=>props.theme.colors.light};\n  font-size: 25px;\n  font-weight: bold;\n  border-image-source: ${props=>`linear-gradient(to left, transparent, ${props.theme.colors.primary}, transparent)`};\n`;const Button=styled.button`\n  padding: 5px 10px;\n  margin-bottom: 10px;\n  cursor: pointer;\n  background-color: transparent;\n  border-bottom: 1px solid ${props=>props.theme.colors.primary};\n  border-top: 0px solid ${props=>props.theme.colors.primary};\n  border-left-width: 0px;\n  border-right-width: 0px;\n  color: ${props=>props.theme.colors.light};\n  font-size: 12px;\n\n  &:hover {\n    background-color: ${props=>props.theme.colors.primaryLight};\n  }\n`;const MainContainer=styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: ${props=>props.theme.colors.contrast};\n  opacity: 0.4;\n  align-items: center;\n  position: fixed;\n  width: ${props=>props.windowWidth-30}px;\n  height: 50px;\n  z-index: 99999;\n  border: 10px solid;\n  border-image-slice: 1;\n  border-width: 1px;\n  /* border: 1px solid ${props=>props.theme.colors.primary}; */\n  width: 100%;\n  bottom: 0px;\n  border-left-width: 0px;\n  border-right-width: 0px;\n  color: ${props=>props.theme.colors.dark};\n  font-size: 29px;\n  font-weight: bold;\n  border-image-source: ${props=>`linear-gradient(to left, transparent, ${props.theme.colors.primary}, transparent)`};\n\n  &:hover {\n    opacity: 1;\n  }\n`;const ProgressBar=styled.div`\n  position: absolute;\n  height: 100%;\n  background-color: ${props=>props.theme.colors.primary};\n  opacity: 0.2;\n  z-index: -1;\n  width: ${props=>props.progress*100}%;\n`;function UIControls(){const{floatingCamera,setFloatingCamera,scrollElement}=useStore();const[progress,setProgress]=useState(0);useEffect(()=>{if(scrollElement){scrollElement.onscroll=()=>{const{scrollTop,scrollHeight}=scrollElement;setProgress(scrollTop*1.125/scrollHeight);};}},[scrollElement]);const scrollTo=useCallback(function(){let index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return scrollElement==null?void 0:scrollElement.scroll({top:index*scrollElement.scrollHeight,behavior:'smooth'});},[scrollElement]);const onGoPrev=()=>{let targetPosition=Math.floor(progress*relevantStops.length-0.3);//Is this not elegant enought? The other option would be to map every position to every scroll percentage. No thnks...\nif(progress*relevantStops.length===8){targetPosition=6;}if(targetPosition>=0)scrollTo(relevantStops[targetPosition].position);};const onGoNext=()=>{let targetPosition=Math.ceil(progress*relevantStops.length+0.69);if(targetPosition<=relevantStops.length){scrollTo(relevantStops[targetPosition].position);}};if(floatingCamera)return/*#__PURE__*/React.createElement(MainContainer,{onClick:()=>setFloatingCamera(false)},/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"div\",null,\"Go Back.\"),/*#__PURE__*/React.createElement(\"div\",null));return/*#__PURE__*/React.createElement(MainControlerContainer,null,/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(Button,{onClick:onGoPrev,className:\"controls\"},\"Prev page\"),/*#__PURE__*/React.createElement(Button,{onClick:onGoNext,className:\"controls\"},\"Next page\"),/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(ProgressBar,{progress:progress}));}export default UIControls;","map":null,"metadata":{},"sourceType":"module"}