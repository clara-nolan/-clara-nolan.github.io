{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from 'three';\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n\n    _defineProperty(this, \"object\", void 0);\n\n    _defineProperty(this, \"changeEvent\", {\n      type: 'change'\n    });\n\n    _defineProperty(this, \"EPS\", 0.000001);\n\n    _defineProperty(this, \"enabled\", true);\n\n    _defineProperty(this, \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n\n    _defineProperty(this, \"screenOrientation\", 0);\n\n    _defineProperty(this, \"alphaOffset\", 0);\n\n    _defineProperty(this, \"onDeviceOrientationChangeEvent\", event => {\n      this.deviceOrientation = event;\n    });\n\n    _defineProperty(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n\n    _defineProperty(this, \"zee\", new Vector3(0, 0, 1));\n\n    _defineProperty(this, \"euler\", new Euler());\n\n    _defineProperty(this, \"q0\", new Quaternion());\n\n    _defineProperty(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n\n    _defineProperty(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n      quaternion.setFromEuler(this.euler); // orient the device\n\n      quaternion.multiply(this.q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient)); // adjust for screen orientation\n    });\n\n    _defineProperty(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent(); // run once on load\n      // iOS 13+\n\n      if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == 'granted') {\n            window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n            window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(error => {\n          console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n        });\n      } else {\n        window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n        window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      }\n\n      this.enabled = true;\n    });\n\n    _defineProperty(this, \"disconnect\", () => {\n      window.removeEventListener('orientationchange', this.onScreenOrientationChangeEvent);\n      window.removeEventListener('deviceorientation', this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n\n    _defineProperty(this, \"lastQuaternion\", new Quaternion());\n\n    _defineProperty(this, \"update\", () => {\n      if (this.enabled === false) return;\n      const device = this.deviceOrientation;\n\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0; // Z\n\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0; // O\n\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"dispose\", () => this.disconnect());\n\n    this.object = object;\n    this.object.rotation.reorder('YXZ');\n    this.connect();\n  }\n\n}\n\nexport { DeviceOrientationControls };","map":null,"metadata":{},"sourceType":"module"}