{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback, useState } from \"react\";\n\nfunction useQueueState(initialList) {\n  var _a = useState(__spreadArray([], initialList, true)),\n      list = _a[0],\n      setList = _a[1];\n\n  var enqueue = useCallback(function (item) {\n    var newList = __spreadArray(__spreadArray([], list, true), [item], false);\n\n    setList(newList);\n    return newList.length;\n  }, [list]);\n  var dequeue = useCallback(function () {\n    if (list.length > 0) {\n      var firstItem = list[0];\n      setList(__spreadArray([], list.slice(1), true));\n      return firstItem;\n    }\n\n    return undefined;\n  }, [list]);\n  var peek = useCallback(function () {\n    if (list.length > 0) {\n      return list[0];\n    }\n\n    return undefined;\n  }, [list]);\n  var controls = {\n    dequeue: dequeue,\n    enqueue: enqueue,\n    length: list.length,\n    peek: peek\n  };\n  return [list, controls];\n}\n\nexport { useQueueState };","map":null,"metadata":{},"sourceType":"module"}