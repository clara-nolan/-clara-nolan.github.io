{"ast":null,"code":"import { useEffect, useCallback, useState } from \"react\";\nimport { useDidMount } from \"./useDidMount\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n * useSessionstorage\n * Tracks a value within sessionStorage and updates it\n *\n * @param key Key of the value to be stored\n * @param defaultValue Default value of the stored item\n * @see {@link https://react-hooks.org/docs/useSessionstorage}\n */\n\nfunction useSessionstorage(key, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  useWarningOnMountInDevelopment(\"useSessionstorage is deprecated, it will be removed in the next major release. Please use useSessionstorageState instead.\");\n  var parseJSONString = useCallback(function (valueToParse) {\n    if (!valueToParse) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(valueToParse);\n    } catch (_a) {\n      return valueToParse;\n    }\n  }, []);\n  var getValueFromSessionStorage = useCallback(function () {\n    var _a;\n\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    var storedValue = (_a = sessionStorage.getItem(key)) !== null && _a !== void 0 ? _a : \"null\";\n    return parseJSONString(storedValue);\n  }, [key, parseJSONString]);\n\n  var _a = useState(getValueFromSessionStorage()),\n      value = _a[0],\n      setValue = _a[1];\n\n  var saveValueToSessionStorage = useCallback(function (valueToSet) {\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    return sessionStorage.setItem(key, JSON.stringify(valueToSet));\n  }, [key]);\n  var set = useCallback(function (newValue) {\n    saveValueToSessionStorage(newValue);\n    setValue(newValue);\n  }, [saveValueToSessionStorage, setValue]); // eslint-disable-next-line consistent-return\n\n  function remove() {\n    if (typeof sessionStorage === \"undefined\") {\n      return null;\n    }\n\n    sessionStorage.removeItem(key);\n    setValue(null);\n    return undefined;\n  }\n\n  function init() {\n    var initialValue = getValueFromSessionStorage();\n\n    if (initialValue === null || initialValue === \"null\") {\n      set(defaultValue);\n    }\n  }\n\n  useDidMount(function () {\n    init();\n  });\n  var listen = useCallback(function (event) {\n    if (event.storageArea === sessionStorage && event.key === key) {\n      set(parseJSONString(event.newValue));\n    }\n  }, [key, parseJSONString, set]);\n  useEffect(function () {\n    window.addEventListener(\"storage\", listen);\n    return function () {\n      window.removeEventListener(\"storage\", listen);\n    };\n  }, [listen]);\n  var handler = Object.assign([value, set, remove], {\n    remove: remove,\n    set: set,\n    value: value\n  });\n  return handler;\n}\n\nexport { useSessionstorage };","map":null,"metadata":{},"sourceType":"module"}