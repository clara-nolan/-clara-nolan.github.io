{"ast":null,"code":"/* eslint-disable sort-keys-fix/sort-keys-fix */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { noop } from \"../utils/noop\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useWarningOnMountInDevelopment } from \"./useWarningOnMountInDevelopment\";\n/**\n * useLocalstorage hook\n * Tracks a value within localStorage and updates it\n *\n * @param {string} key - Key of the localStorage object\n * @param {any} defaultValue - Default initial value\n */\n\nfunction useLocalstorage(key, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  var _a = useState(getValueFromLocalStorage()),\n      value = _a[0],\n      setValue = _a[1];\n\n  useWarningOnMountInDevelopment(\"useLocalstorage is deprecated, it will be removed in the next major release. Please use useLocalstorageState instead.\");\n\n  function init() {\n    var valueLoadedFromLocalStorage = getValueFromLocalStorage();\n\n    if (valueLoadedFromLocalStorage === null || valueLoadedFromLocalStorage === \"null\") {\n      set(defaultValue);\n    }\n  }\n\n  function getValueFromLocalStorage() {\n    if (typeof localStorage === \"undefined\") {\n      return null;\n    }\n\n    var storedValue = localStorage.getItem(key) || \"null\";\n\n    try {\n      return JSON.parse(storedValue);\n    } catch (error) {\n      console.error(error);\n    }\n\n    return storedValue;\n  }\n\n  function saveValueToLocalStorage(valueToSet) {\n    if (typeof localStorage === \"undefined\") {\n      return null;\n    }\n\n    return localStorage.setItem(key, JSON.stringify(valueToSet));\n  }\n\n  var set = useCallback(function (newValue) {\n    setValue(newValue);\n    saveValueToLocalStorage(newValue);\n  }, []);\n  var listen = useCallback(function (event) {\n    if (event.storageArea === localStorage && event.key === key) {\n      setValue(event.newValue);\n    }\n  }, []); // eslint-disable-next-line consistent-return\n\n  var remove = useCallback(function () {\n    set(null);\n\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n\n    localStorage.removeItem(key);\n    return undefined;\n  }, [key]); // initialize\n\n  useEffect(function () {\n    init();\n  }, []); // check for changes across windows\n\n  useEffect(function () {\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"storage\", listen);\n      return function () {\n        window.removeEventListener(\"storage\", listen);\n      };\n    } else {\n      console.warn(\"useLocalstorage: window is undefined.\");\n    }\n\n    return noop;\n  }, []);\n  var handler = Object.assign([value, set, remove], {\n    value: value,\n    remove: remove,\n    set: set\n  });\n  return handler;\n}\n\nexport { useLocalstorage };","map":null,"metadata":{},"sourceType":"module"}